// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.main = function() {
	SutlTests.RunTests();
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Sutl = $hx_exports["Sutl"] = function() {
};
Sutl.__name__ = ["Sutl"];
Sutl.version = function() {
	return "0.1";
};
Sutl.prototype = {
	ExampleString: function() {
		return "example string";
	}
	,ExampleInt: function() {
		return 1;
	}
	,ExampleFloat: function() {
		return 1.0;
	}
	,ExampleBool: function() {
		return true;
	}
	,ExampleNull: function() {
		return null;
	}
	,ExampleArray: function() {
		return [1,2];
	}
	,ExampleDict: function() {
		return { "x" : 1};
	}
	,_processPath: function(startfrom,parentscope,scope,l,src,tt,b,h) {
		var la = Util3.get(scope,"a");
		var lb = Util3.get(scope,"b");
		var lnotfirst = Util3.get(scope,"notfirst",false);
		if(lnotfirst) {
			return this._doPath(la,lb);
		} else {
			var laccum = this._doPath([startfrom],la);
			var laccum1 = this._doPath(laccum,lb);
			return laccum1;
		}
	}
	,_doPath: function(a,b) {
		var retval = [];
		if(Util2.isArray(a)) {
			if(b != null && !(Util2.isString(b) && b.length == 0)) {
				var _g = 0;
				var _g1 = js_Boot.__cast(a , Array);
				while(_g < _g1.length) {
					var lsourceItem = _g1[_g];
					++_g;
					try {
						if(b == "**") {
							retval.push(lsourceItem);
							var lstack = [lsourceItem];
							while(lstack.length > 0) {
								var litem = lstack.pop();
								if(Util2.isObject(litem)) {
									var _g2 = 0;
									var _g3 = UtilReflect.fields(litem);
									while(_g2 < _g3.length) {
										var lattrib = _g3[_g2];
										++_g2;
										var lelem = Util3.get(litem,lattrib);
										retval.push(lelem);
										lstack.push(lelem);
									}
								} else if(Util2.isArray(litem)) {
									var _g21 = 0;
									var _g31 = js_Boot.__cast(litem , Array);
									while(_g21 < _g31.length) {
										var lelem1 = _g31[_g21];
										++_g21;
										retval.push(lelem1);
										lstack.push(lelem1);
									}
								}
							}
						} else if(b == "*") {
							if(Util2.isObject(lsourceItem)) {
								var _g22 = 0;
								var _g32 = UtilReflect.fields(lsourceItem);
								while(_g22 < _g32.length) {
									var lattrib1 = _g32[_g22];
									++_g22;
									var lelem2 = Util3.get(lsourceItem,lattrib1);
									retval.push(lelem2);
								}
							} else if(Util2.isArray(lsourceItem)) {
								var _g23 = 0;
								var _g33 = js_Boot.__cast(lsourceItem , Array);
								while(_g23 < _g33.length) {
									var lelem3 = _g33[_g23];
									++_g23;
									retval.push(lelem3);
								}
							}
						} else if(Util2.isObject(lsourceItem) && Util2.isString(b)) {
							if(UtilReflect.hasField(lsourceItem,b)) {
								retval.push(UtilReflect.field(lsourceItem,b));
							}
						} else if(Util2.isSequence(lsourceItem) && Util2.isNumber(b)) {
							var arr = Util.SequenceToArray(lsourceItem);
							if(b >= 0 && b < arr.length) {
								retval.push(arr[b]);
							}
						}
					} catch( ex ) {
						haxe_CallStack.lastException = ex;
						if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
						haxe_Log.trace(ex,{ fileName : "Sutl.hx", lineNumber : 150, className : "Sutl", methodName : "_doPath"});
					}
				}
			} else {
				retval = a;
			}
		}
		return retval;
	}
	,builtins: function() {
		var _gthis = this;
		var functions = { "+" : function(parentscope,scope,l,src,tt,b,h) {
			var a = Util3.get(scope,"a",0);
			var bb = Util3.get(scope,"b",0);
			if(Util.gettype(a) == Util.gettype(bb)) {
				return a + bb;
			} else {
				return null;
			}
		}, "-" : function(parentscope1,scope1,l1,src1,tt1,b1,h1) {
			return Util3.get(scope1,"a",0) - Util3.get(scope1,"b",0);
		}, "x" : function(parentscope2,scope2,l2,src2,tt2,b2,h2) {
			return Util3.get(scope2,"a",1) * Util3.get(scope2,"b",1);
		}, "/" : function(parentscope3,scope3,l3,src3,tt3,b3,h3) {
			return Util3.get(scope3,"a",1) / Util3.get(scope3,"b",1);
		}, "=" : function(parentscope4,scope4,l4,src4,tt4,b4,h4) {
			var a1 = Util3.get(scope4,"a",null);
			var b5 = Util3.get(scope4,"b",null);
			if(Util.gettype(a1) == Util.gettype(b5)) {
				return a1 == b5;
			} else {
				return false;
			}
		}, "!=" : function(parentscope5,scope5,l5,src5,tt5,b6,h5) {
			var a2 = Util3.get(scope5,"a",null);
			var b7 = Util3.get(scope5,"b",null);
			return !(Util.gettype(a2) == Util.gettype(b7) && a2 == b7);
		}, ">=" : function(parentscope6,scope6,l6,src6,tt6,b8,h6) {
			return Util3.get(scope6,"a",null) >= Util3.get(scope6,"b",null);
		}, "<=" : function(parentscope7,scope7,l7,src7,tt7,b9,h7) {
			return Util3.get(scope7,"a",null) <= Util3.get(scope7,"b",null);
		}, ">" : function(parentscope8,scope8,l8,src8,tt8,b10,h8) {
			return Util3.get(scope8,"a",null) > Util3.get(scope8,"b",null);
		}, "<" : function(parentscope9,scope9,l9,src9,tt9,b11,h9) {
			return Util3.get(scope9,"a",null) < Util3.get(scope9,"b",null);
		}, "&&" : function(parentscope10,scope10,l10,src10,tt10,b12,h10) {
			if(UtilReflect.hasField(scope10,"a")) {
				if(UtilReflect.hasField(scope10,"b")) {
					if(Util3.isTruthy(Util3.get(scope10,"a",false))) {
						return Util3.isTruthy(Util3.get(scope10,"b",false));
					} else {
						return false;
					}
				} else {
					return Util3.isTruthy(Util3.get(scope10,"a",false));
				}
			} else {
				return Util3.isTruthy(Util3.get(scope10,"b",false));
			}
		}, "||" : function(parentscope11,scope11,l11,src11,tt11,b13,h11) {
			if(!Util3.isTruthy(Util3.get(scope11,"a",false))) {
				return Util3.isTruthy(Util3.get(scope11,"b",false));
			} else {
				return true;
			}
		}, "!" : function(parentscope12,scope12,l12,src12,tt12,b14,h12) {
			return !Util3.isTruthy(Util3.get(scope12,"b",false));
		}, "if" : function(parentscope13,scope13,l13,src13,tt13,b15,h13) {
			var retval = null;
			var condvalue = false;
			if(UtilReflect.hasField(scope13,"cond")) {
				var condvalue1 = Util3.get(scope13,"cond");
				condvalue = Util3.isTruthy(_gthis._evaluate(parentscope13,condvalue1,l13,src13,tt13,b15,h13));
			}
			if(condvalue) {
				if(UtilReflect.hasField(scope13,"true")) {
					var retval1 = Util3.get(scope13,"true");
					retval = _gthis._evaluate(parentscope13,retval1,l13,src13,tt13,b15,h13);
				}
			} else if(UtilReflect.hasField(scope13,"false")) {
				var retval2 = Util3.get(scope13,"false");
				retval = _gthis._evaluate(parentscope13,retval2,l13,src13,tt13,b15,h13);
			}
			return retval;
		}, "keys" : function(parentscope14,scope14,l14,src14,tt14,b16,h14) {
			var obj = Util3.get(scope14,"map");
			if(Util2.isObject(obj)) {
				var retval3 = UtilReflect.fields(obj);
				retval3.sort(function(a3,b17) {
					return Reflect.compare(a3,b17);
				});
				return retval3;
			} else {
				return null;
			}
		}, "values" : function(parentscope15,scope15,l15,src15,tt15,b18,h15) {
			var obj1 = Util3.get(scope15,"map");
			if(Util2.isObject(obj1)) {
				var keys = UtilReflect.fields(obj1);
				keys.sort(function(a4,b19) {
					return Reflect.compare(a4,b19);
				});
				var vals = keys.map(function(key) {
					return Util3.get(obj1,key);
				});
				return vals;
			} else {
				return null;
			}
		}, "len" : function(parentscope16,scope16,l16,src16,tt16,b20,h16) {
			var item = Util3.get(scope16,"list",Util3.get(scope16,"value"));
			if(Util2.isSequence(item)) {
				var arr = Util.SequenceToArray(item);
				return arr.length;
			} else {
				return 0;
			}
		}, "type" : function(parentscope17,scope17,l17,src17,tt17,b21,h17) {
			var item1 = Util3.get(scope17,"value");
			return Util.gettype(item1);
		}, "makemap" : function(parentscope18,scope18,l18,src18,tt18,b22,h18) {
			var retval4 = { };
			var arr1 = Util3.get(scope18,"value");
			if(Util2.isArray(arr1)) {
				var _g = 0;
				var _g1 = js_Boot.__cast(arr1 , Array);
				while(_g < _g1.length) {
					var entry = _g1[_g];
					++_g;
					if(Util2.isArray(entry) && entry.length >= 2 && Util2.isString(entry[0])) {
						UtilReflect.setField(retval4,entry[0],entry[1]);
					}
				}
			}
			return retval4;
		}, "reduce" : function(parentscope19,scope19,l19,src19,tt19,b23,h19) {
			var retval5 = { };
			var listobj = Util3.get(scope19,"list");
			var t = Util3.get(scope19,"t");
			var accum = Util3.get(scope19,"accum");
			if(Util2.isSequence(listobj)) {
				var list = Util.SequenceToArray(listobj);
				var s2 = { };
				if(Util2.isObject(parentscope19)) {
					s2 = Util.shallowCopy(parentscope19);
				}
				Util.addObject(s2,scope19);
				var _g11 = 0;
				var _g2 = list.length;
				while(_g11 < _g2) {
					var ix = _g11++;
					var item2 = list[ix];
					UtilReflect.setField(s2,"item",item2);
					UtilReflect.setField(s2,"accum",accum);
					UtilReflect.setField(s2,"ix",ix);
					accum = _gthis._evaluate(s2,t,l19,src19,tt19,b23,h19);
				}
			}
			return accum;
		}, "$" : function(parentscope20,scope20,l20,src20,tt20,b24,h20) {
			return _gthis._processPath(src20,parentscope20,scope20,l20,src20,tt20,b24,h20);
		}, "@" : function(parentscope21,scope21,l21,src21,tt21,b25,h21) {
			return _gthis._processPath(parentscope21,parentscope21,scope21,l21,src21,tt21,b25,h21);
		}, "*" : function(parentscope22,scope22,l22,src22,tt22,b26,h22) {
			return _gthis._processPath(l22,parentscope22,scope22,l22,src22,tt22,b26,h22);
		}, "~" : function(parentscope23,scope23,l23,src23,tt23,b27,h23) {
			return _gthis._processPath(tt23,parentscope23,scope23,l23,src23,tt23,b27,h23);
		}, "%" : function(parentscope24,scope24,l24,src24,tt24,b28,h24) {
			var la = Util3.get(scope24,"a");
			var lb = Util3.get(scope24,"b");
			var lnotfirst = Util3.get(scope24,"notfirst");
			if(lnotfirst) {
				return _gthis._doPath(la,lb);
			} else if(la == null) {
				return _gthis._doPath([lb],null);
			} else {
				return _gthis._doPath([la],lb);
			}
		}, "head" : function(parentscope25,scope25,l25,src25,tt25,b29,h25) {
			var lb1 = Util3.get(scope25,"b");
			if(Util2.isSequence(lb1)) {
				var arr2 = Util.SequenceToArray(lb1);
				if(arr2.length > 0) {
					return arr2[0];
				} else {
					return null;
				}
			} else {
				return null;
			}
		}, "tail" : function(parentscope26,scope26,l26,src26,tt26,b30,h26) {
			var lb2 = Util3.get(scope26,"b");
			if(Util2.isSequence(lb2)) {
				var arr3 = Util.SequenceToArray(lb2);
				if(arr3.length > 0) {
					return arr3.slice(1);
				} else {
					return [];
				}
			} else {
				return null;
			}
		}, "split" : function(parentscope27,scope27,l27,src27,tt27,b31,h27) {
			var lvalue = Util3.get(scope27,"value");
			var lsep = Util3.get(scope27,"sep",",");
			var lmax = Util3.get(scope27,"max");
			var retval6 = null;
			if(!(!Util2.isString(lvalue))) {
				if(!(!(Util3.isTruthy(lsep) && Util2.isString(lsep)))) {
					if(!(!(Util2.isNumber(lmax) || lmax == null))) {
						var lstr = js_Boot.__cast(lvalue , String);
						retval6 = lvalue.split(lsep);
						if(lmax != null && lmax >= 0 && lmax < lstr.length) {
							var lresult1 = retval6.slice(0,lmax - 1);
							var lresult2 = retval6.slice(-1 * (retval6.length - lmax + 1));
							lresult1[lmax - 1] = lresult2.join(lsep);
							retval6 = lresult1;
						}
					}
				}
			}
			return retval6;
		}, "trim" : function(parentscope28,scope28,l28,src28,tt28,b32,h28) {
			var lvalue1 = Util3.get(scope28,"value");
			var retval7 = null;
			if(!(!Util2.isString(lvalue1))) {
				retval7 = StringTools.trim(lvalue1);
			}
			return retval7;
		}, "pos" : function(parentscope29,scope29,l29,src29,tt29,b33,h29) {
			var lvalue2 = Util3.get(scope29,"value");
			var lsub = Util3.get(scope29,"sub");
			var retval8 = null;
			if(!(!Util2.isString(lvalue2))) {
				if(!(!(Util3.isTruthy(lsub) && Util2.isString(lsub)))) {
					retval8 = (js_Boot.__cast(lvalue2 , String)).indexOf(lsub);
				}
			}
			return retval8;
		}, "string" : function(parentscope30,scope30,l30,src30,tt30,b34,h30) {
			var lvalue3 = Util3.get(scope30,"value");
			var retval9;
			if(Util2.isString(lvalue3)) {
				retval9 = lvalue3;
			} else if(Util2.isNumber(lvalue3)) {
				try {
					retval9 = Std.string(lvalue3);
				} catch( err ) {
					haxe_CallStack.lastException = err;
					retval9 = "failed cast";
				}
			} else if(Util2.isBool(lvalue3)) {
				if(Util3.isTruthy(lvalue3)) {
					retval9 = "true";
				} else {
					retval9 = "false";
				}
			} else if(lvalue3 == null) {
				retval9 = "null";
			} else if(Util2.isArray(lvalue3)) {
				retval9 = "list";
			} else if(Util2.isObject(lvalue3)) {
				retval9 = "map";
			} else {
				retval9 = "unknown";
			}
			return retval9;
		}, "number" : function(parentscope31,scope31,l31,src31,tt31,b35,h31) {
			var lvalue4 = Util3.get(scope31,"value");
			var retval10 = 0;
			if(Util2.isNumber(lvalue4)) {
				retval10 = lvalue4;
			} else if(Util2.isString(lvalue4)) {
				try {
					retval10 = parseFloat(lvalue4);
				} catch( err1 ) {
					haxe_CallStack.lastException = err1;
				}
			} else if(Util2.isBool(lvalue4)) {
				if(Util3.isTruthy(lvalue4)) {
					retval10 = 1;
				} else {
					retval10 = 0;
				}
			} else {
				retval10 = 0;
			}
			return retval10;
		}, "boolean" : function(parentscope32,scope32,l32,src32,tt32,b36,h32) {
			var lvalue5 = Util3.get(scope32,"value");
			var retval11;
			if(Util2.isBool(lvalue5)) {
				retval11 = lvalue5;
			} else {
				retval11 = Util3.isTruthy(lvalue5);
			}
			return retval11;
		}};
		var _g3 = 0;
		var _g12 = UtilReflect.fields(functions);
		while(_g3 < _g12.length) {
			var fieldname = _g12[_g3];
			++_g3;
			UtilReflect.setField(functions,"has" + Std.string(fieldname),function(parentscope33,scope33,l33,src33,tt33,b37,h33) {
				return true;
			});
		}
		return functions;
	}
	,logenter: function(msg,s,t,h) {
		if(h > 0) {
			haxe_Log.trace("(" + h + "): " + msg,{ fileName : "Sutl.hx", lineNumber : 642, className : "Sutl", methodName : "logenter"});
			haxe_Log.trace(" - s: " + JSON.stringify(s,null,"  "),{ fileName : "Sutl.hx", lineNumber : 643, className : "Sutl", methodName : "logenter"});
			haxe_Log.trace(" - t: " + JSON.stringify(t,null,"  "),{ fileName : "Sutl.hx", lineNumber : 644, className : "Sutl", methodName : "logenter"});
		}
	}
	,logexit: function(msg,r,h) {
		if(h > 0) {
			haxe_Log.trace("(" + h + "): " + msg,{ fileName : "Sutl.hx", lineNumber : 652, className : "Sutl", methodName : "logexit"});
			haxe_Log.trace(" - r: " + JSON.stringify(r,null,"  "),{ fileName : "Sutl.hx", lineNumber : 653, className : "Sutl", methodName : "logexit"});
		}
	}
	,evaluate: function(src,tt,l,h) {
		if(h == null) {
			h = 0;
		}
		var retval = this._evaluate(src,tt,l,src,tt,this.builtins(),h);
		return retval;
	}
	,dec: function(x) {
		return x - 1;
	}
	,_evaluate: function(s,t,l,src,tt,b,h) {
		var r = null;
		this.logenter("_evaluate",s,t,h);
		if(Util2.isObject(t)) {
			if(Util3.isEval(t)) {
				r = this._evaluateEval(true,s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isEval2(t)) {
				r = this._evaluateEval2(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isBuiltinEval(t)) {
				r = this._evaluateBuiltin(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isQuoteEval(t)) {
				r = this._quoteEvaluate(s,Util3.get(t,"'"),l,src,tt,b,this.dec(h));
			} else if(Util3.isColonEval(t)) {
				r = Util3.get(t,":");
			} else if(Util3.isDictTransform(t)) {
				r = this._evaluateDict(s,t,l,src,tt,b,this.dec(h),false);
			}
		} else if(Util2.isArray(t)) {
			if(Util.isArrayBuiltinEval(t,b)) {
				r = this._evaluateArrayBuiltin(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isListTransform(t)) {
				var tlist = Util.SequenceToArray(t);
				if(tlist.length > 0 && tlist[0] == "&&") {
					r = Util.flatten(this._evaluateList(s,tlist.slice(1),l,src,tt,b,this.dec(h)));
				} else {
					r = this._evaluateList(s,t,l,src,tt,b,this.dec(h));
				}
			}
		} else if(Util.isStringBuiltinEval(t,b)) {
			r = this._evaluateStringBuiltin(s,t,l,src,tt,b,this.dec(h));
		} else {
			r = t;
		}
		this.logexit("_evaluate",r,h);
		return r;
	}
	,_quoteEvaluate: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluate",s,t,h);
		var r;
		if(Util3.isDoubleQuoteEval(t)) {
			r = this._evaluate(s,Util3.get(t,"''"),l,src,tt,b,this.dec(h));
		} else if(Util3.isDictTransform(t)) {
			r = this._quoteEvaluateDict(s,t,l,src,tt,b,this.dec(h));
		} else if(Util3.isListTransform(t)) {
			r = this._quoteEvaluateList(s,t,l,src,tt,b,this.dec(h));
		} else {
			r = t;
		}
		this.logexit("_quoteEvaluate",r,h);
		return r;
	}
	,_evaluateStringBuiltin: function(s,t,l,src,tt,b,h) {
		var strt = js_Boot.__cast(t , String);
		var larr = strt.split(".");
		var larr2 = [];
		var _g = 0;
		while(_g < larr.length) {
			var litem = larr[_g];
			++_g;
			try {
				var i = Std.parseInt(litem);
				if(i != null) {
					larr2.push(i);
				} else {
					larr2.push(litem);
				}
			} catch( err ) {
				haxe_CallStack.lastException = err;
				larr2.push(litem);
			}
		}
		return this._evaluateArrayBuiltin(s,larr2,l,src,tt,b,h);
	}
	,_evaluateArrayBuiltin: function(s,t,l,src,tt,b,h) {
		var retval = null;
		var arrt = js_Boot.__cast(t , Array);
		var lop = null;
		if(arrt.length > 0) {
			lop = js_Boot.__cast(arrt[0] , String);
		}
		if(lop.length > 0) {
			var lopChar = lop.charAt(0);
			var uset = { "&" : Util.getArrayBuiltinName(lop), "args" : arrt.slice(1), "head" : lopChar == "^"};
			retval = this._evaluateBuiltin(s,uset,l,src,tt,b,this.dec(h));
		}
		return retval;
	}
	,_evaluateBuiltin: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateBuiltin",s,t,h);
		var retval = null;
		if(UtilReflect.hasField(t,"args")) {
			var args = Util3.get(t,"args");
			var builtinname = this._evaluate(s,Util3.get(t,"&"),l,src,tt,b,this.dec(h));
			if(args.length == 0) {
				var uset = { "&" : builtinname};
				retval = this._evaluateBuiltinSimple(false,s,uset,l,src,tt,b,this.dec(h));
			} else if(args.length == 1) {
				var uset1 = { "&" : builtinname, "b" : this._evaluate(s,args[0],l,src,tt,b,this.dec(h))};
				retval = this._evaluateBuiltinSimple(false,s,uset1,l,src,tt,b,this.dec(h));
			} else {
				var list = js_Boot.__cast(this._evaluateList(s,args.slice(1),l,src,tt,b,this.dec(h)) , Array);
				retval = this._evaluate(s,args[0],l,src,tt,b,this.dec(h));
				var notfirst = false;
				var _g = 0;
				while(_g < list.length) {
					var item = list[_g];
					++_g;
					var uset2 = { "&" : builtinname, "a" : retval, "b" : item, "notfirst" : notfirst};
					retval = this._evaluateBuiltinSimple(false,s,uset2,l,src,tt,b,this.dec(h));
					notfirst = true;
				}
			}
			if(Util2.isArray(retval) && Util3.isTruthy(Util3.get(t,"head"))) {
				var arrretval = js_Boot.__cast(retval , Array);
				if(arrretval.length > 0) {
					retval = arrretval[0];
				} else {
					retval = null;
				}
			}
		} else {
			retval = this._evaluateBuiltinSimple(true,s,t,l,src,tt,b,h);
		}
		this.logexit("_evaluateBuiltin",retval,h);
		return retval;
	}
	,_evaluateBuiltinSimple: function(needseval,s,t,l,src,tt,b,h) {
		var retval = null;
		var builtinname = Util3.get(t,"&");
		var builtinf = Util3.get(b,builtinname);
		var llibname;
		if(builtinf) {
			llibname = "_override_" + Std.string(Util3.get(t,"&"));
		} else {
			llibname = Util3.get(t,"&");
		}
		if(Util2.isObject(l) && UtilReflect.hasField(l,llibname)) {
			var t2 = Util.shallowCopy(t);
			UtilReflect.setField(t2,"!",["^*",Util3.get(t,"&")]);
			UtilReflect.deleteField(t2,"&");
			retval = this._evaluateEval(needseval,s,t2,l,src,tt,b,this.dec(h));
		} else if(builtinf != null) {
			var sX;
			if(needseval) {
				sX = this._evaluateDict(s,t,l,src,tt,b,this.dec(h),true);
			} else {
				sX = t;
			}
			var s2 = null;
			if(Util2.isObject(s)) {
				s2 = Util.shallowCopy(s);
				Util.addObject(s2,sX);
			} else {
				s2 = sX;
			}
			var l2 = l;
			if(UtilReflect.hasField(t,"*")) {
				l2 = this._evaluateDict(s,Util3.get(t,"*"),l,src,tt,b,this.dec(h),false);
			}
			retval = builtinf(s,s2,l2,src,tt,b,this.dec(h));
		}
		return retval;
	}
	,_evaluateEval: function(needseval,s,t,l,src,tt,b,h) {
		this.logenter("_evaluateEval",s,t,h);
		var retval;
		var teval;
		if(needseval) {
			teval = this._evaluateDict(s,t,l,src,tt,b,h,false);
		} else {
			teval = t;
		}
		var t2 = Util3.get(teval,"!");
		var s2 = { };
		if(Util2.isObject(s)) {
			s2 = Util.shallowCopy(s);
		}
		Util.addObject(s2,teval);
		var l2 = l;
		if(UtilReflect.hasField(t,"*")) {
			l2 = this._evaluate(s,Util3.get(t,"*"),l,src,tt,b,h);
		}
		var r = this._evaluate(s2,t2,l2,src,tt,b,h);
		this.logexit("_evaluateEval",r,h);
		return r;
	}
	,_evaluateEval2: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateEval2",s,t,h);
		var retval;
		var t2 = this._evaluate(s,Util3.get(t,"!!"),l,src,tt,b,h);
		var s2 = s;
		if(UtilReflect.hasField(t,"s")) {
			var ts = this._evaluate(s,Util3.get(t,"s"),l,src,tt,b,h);
			if(Util2.isObject(ts)) {
				s2 = { };
				if(Util2.isObject(s)) {
					s2 = Util.shallowCopy(s);
				}
				Util.addObject(s2,t2);
			} else {
				s2 = ts;
			}
		}
		var l2 = l;
		if(UtilReflect.hasField(t,"*")) {
			l2 = this._evaluate(s,Util3.get(t,"*"),l,src,tt,b,h);
		}
		var r = this._evaluate(s2,t2,l2,src,tt,b,h);
		this.logexit("_evaluateEval",r,h);
		return r;
	}
	,_evaluateDict: function(s,t,l,src,tt,b,h,skipAmp) {
		this.logenter("_evaluateDict",s,t,h);
		var retval = this._doevaluateDict(false,s,t,l,src,tt,b,this.dec(h),skipAmp);
		this.logexit("_evaluateDict",retval,h);
		return retval;
	}
	,_quoteEvaluateDict: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluateDict",s,t,h);
		var retval = this._doevaluateDict(true,s,t,l,src,tt,b,this.dec(h),false);
		this.logexit("_quoteEvaluateDict",retval,h);
		return retval;
	}
	,_doevaluateDict: function(usequoteform,s,t,l,src,tt,b,h,skipAmp) {
		var retval = { };
		var _g = 0;
		var _g1 = UtilReflect.fields(t);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(usequoteform) {
				UtilReflect.setField(retval,key,this._quoteEvaluate(s,Util3.get(t,key),l,src,tt,b,h));
			} else if(key != "&") {
				var lnewt = this._evaluate(s,Util3.get(t,key),l,src,tt,b,h);
				UtilReflect.setField(retval,key,lnewt);
			}
		}
		return retval;
	}
	,_evaluateList: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateList",s,t,h);
		var retval = this._doevaluateList(false,s,t,l,src,tt,b,this.dec(h));
		this.logexit("_evaluateList",retval,h);
		return retval;
	}
	,_quoteEvaluateList: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluateList",s,t,h);
		var retval = this._doevaluateList(true,s,t,l,src,tt,b,this.dec(h));
		this.logexit("_quoteEvaluateList",retval,h);
		return retval;
	}
	,_doevaluateList: function(usequoteform,s,t,l,src,tt,b,h) {
		var tarr = Util.SequenceToArray(t);
		var retval = tarr.slice();
		var _g1 = 0;
		var _g = tarr.length;
		while(_g1 < _g) {
			var ix = _g1++;
			var elem = tarr[ix];
			if(usequoteform) {
				elem = this._quoteEvaluate(s,elem,l,src,tt,b,h);
			} else {
				elem = this._evaluate(s,elem,l,src,tt,b,h);
			}
			retval[ix] = elem;
		}
		return retval;
	}
	,compilelib: function(decls,dists) {
		var tmp = this.builtins();
		return this._compilelib(decls,dists,{ },tmp);
	}
	,_compilelib: function(decls,dists,l,b) {
		var resultlib = { };
		var resultliblib = { };
		if(Util2.isObject(l)) {
			resultlib = Util.shallowCopy(l);
		}
		var all_candidate_decls = { };
		var _g = 0;
		while(_g < decls.length) {
			var decl = decls[_g];
			++_g;
			var declname = Util3.get(decl,"name","");
			if(UtilReflect.hasField(decl,"requires") && Util2.isArray(Util3.get(decl,"requires"))) {
				var reqnames = js_Boot.__cast(Util3.get(decl,"requires") , Array);
				var _g1 = 0;
				while(_g1 < reqnames.length) {
					var reqname = reqnames[_g1];
					++_g1;
					if(!UtilReflect.hasField(l,reqname)) {
						if(Util3.isPrefix(reqname,declname)) {
							UtilReflect.setField(resultlib,reqname,Util3.get(decl,"transform-t"));
						} else {
							UtilReflect.setField(all_candidate_decls,reqname,[]);
						}
					}
				}
			}
		}
		var _g2 = 0;
		var _g11 = UtilReflect.fields(all_candidate_decls);
		while(_g2 < _g11.length) {
			var reqname1 = _g11[_g2];
			++_g2;
			var candidate_decls = Util3.get(all_candidate_decls,reqname1);
			var _g21 = 0;
			while(_g21 < dists.length) {
				var dist = dists[_g21];
				++_g21;
				var _g3 = 0;
				while(_g3 < dist.length) {
					var decl1 = dist[_g3];
					++_g3;
					var declname1 = Util3.get(decl1,"name","");
					if(Util3.isPrefix(reqname1,declname1)) {
						candidate_decls.push(decl1);
					}
				}
			}
		}
		var _g4 = 0;
		var _g12 = UtilReflect.fields(all_candidate_decls);
		while(_g4 < _g12.length) {
			var reqname2 = _g12[_g4];
			++_g4;
			var candidate_decls1 = Util3.get(all_candidate_decls,reqname2);
			if(Util3.isTruthy(candidate_decls1)) {
				var candidate_decls_arr = js_Boot.__cast(candidate_decls1 , Array);
				var _g22 = 0;
				while(_g22 < candidate_decls_arr.length) {
					var candidate_decl = candidate_decls_arr[_g22];
					++_g22;
					var clresult = this._compilelib([candidate_decl],dists,resultlib,b);
					var clresultlib = Util3.get(clresult,"lib");
					Util.addObject(resultlib,clresultlib);
					UtilReflect.setField(resultlib,reqname2,Util3.get(candidate_decl,"transform-t"));
					break;
				}
			}
		}
		return { "lib" : resultlib};
	}
	,__class__: Sutl
};
var SutlTests = $hx_exports["SutlTests"] = function() { };
SutlTests.__name__ = ["SutlTests"];
SutlTests.RunTests = function() {
	var r = new haxe_unit_TestRunner();
	r.add(new TestsHelloWorld());
	r.add(new TestsGet());
	r.add(new Tests_$isType());
	r.add(new Tests_$Paths());
	r.add(new Tests_$Builtins());
	r.add(new Tests_$Evaluate());
	r.add(new Tests_$Decls());
	r.run();
	if(!r.result.success) {
		haxe_Log.trace("failure",{ fileName : "SutlTests.hx", lineNumber : 20, className : "SutlTests", methodName : "RunTests"});
		throw new js__$Boot_HaxeError(r.result.toString());
	} else {
		haxe_Log.trace("success",{ fileName : "SutlTests.hx", lineNumber : 25, className : "SutlTests", methodName : "RunTests"});
	}
};
var Sutlcore = function() { };
Sutlcore.__name__ = ["Sutlcore"];
Sutlcore.get = function() {
	return JSON.parse(Sutlcore.getStr());
};
Sutlcore.getStr = function() {
	return "\n\t\t[\n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"map-t\": \"^@.t\", \n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": [\n\t\t          \"&&\", \n\t\t          \"^@.accum\", \n\t\t          [\n\t\t            {\n\t\t              \"!\": \"^@.map-t\"\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"map_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"reverse_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": [\n\t\t          \"&&\", \n\t\t          {\n\t\t            \"!\": \"^*.reverse_core_emlynoregan_com\", \n\t\t            \"list\": [\n\t\t              \"&tail\", \n\t\t              \"^@.list\"\n\t\t            ]\n\t\t          }, \n\t\t          [\n\t\t            \"&head\", \n\t\t            \"^@.list\"\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"false\": {\n\t\t        \"'\": []\n\t\t      }, \n\t\t      \"cond\": \"^@.list\", \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"reverse_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": [\n\t\t              \"&&\", \n\t\t              \"^@.accum\", \n\t\t              \"^@.item\"\n\t\t            ]\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": \"^@.accum\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": [\n\t\t              \"&!=\", \n\t\t              \"^@.item\", \n\t\t              null\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"removenulls_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"count_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": {\n\t\t          \"accum\": 0, \n\t\t          \"list\": \"^@.obj\", \n\t\t          \"t\": {\n\t\t            \"'\": {\n\t\t              \"a\": {\n\t\t                \"!\": \"^*.count_core_emlynoregan_com\", \n\t\t                \"obj\": \"^@.item\"\n\t\t              }, \n\t\t              \"b\": \"^@.accum\", \n\t\t              \"&\": \"+\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"reduce\"\n\t\t        }\n\t\t      }, \n\t\t      \"false\": 1, \n\t\t      \"cond\": {\n\t\t        \"'\": {\n\t\t          \"a\": \"list\", \n\t\t          \"b\": {\n\t\t            \"value\": \"^@.obj\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"=\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"count_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"b\": {\n\t\t        \"list\": \"^@.list\", \n\t\t        \"accum\": [\n\t\t          [], \n\t\t          \"^@.lists\"\n\t\t        ], \n\t\t        \"t\": {\n\t\t          \":\": [\n\t\t            [\n\t\t              \"&&\", \n\t\t              \"^@.accum.0\", \n\t\t              [\n\t\t                [\n\t\t                  \"&&\", \n\t\t                  {\n\t\t                    \"true\": {\n\t\t                      \"b\": \"^@.accum.1\", \n\t\t                      \"&\": \"head\"\n\t\t                    }, \n\t\t                    \"false\": [], \n\t\t                    \"cond\": {\n\t\t                      \":\": {\n\t\t                        \"list\": \"^@.accum.1\", \n\t\t                        \"&\": \"len\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }, \n\t\t                  [\n\t\t                    \"^@.item\"\n\t\t                  ]\n\t\t                ]\n\t\t              ]\n\t\t            ], \n\t\t            {\n\t\t              \"b\": \"^@.accum.1\", \n\t\t              \"&\": \"tail\"\n\t\t            }\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"&\": \"head\"\n\t\t    }, \n\t\t    \"name\": \"foldone_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"foldone_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"list\": \"^@.item\", \n\t\t          \"lists\": \"^@.accum\", \n\t\t          \"&\": \"foldone_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"zip_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": [\n\t\t          [\n\t\t            \"&&\", \n\t\t            {\n\t\t              \"map\": \"^@.map1\", \n\t\t              \"&\": \"keys\"\n\t\t            }, \n\t\t            {\n\t\t              \"map\": \"^@.map2\", \n\t\t              \"&\": \"keys\"\n\t\t            }\n\t\t          ], \n\t\t          [\n\t\t            \"&&\", \n\t\t            {\n\t\t              \"map\": \"^@.map1\", \n\t\t              \"&\": \"values\"\n\t\t            }, \n\t\t            {\n\t\t              \"map\": \"^@.map2\", \n\t\t              \"&\": \"values\"\n\t\t            }\n\t\t          ]\n\t\t        ], \n\t\t        \"&\": \"zip\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"addmaps_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^@\", \n\t\t      \"map\", \n\t\t      [\n\t\t        \"^@\", \n\t\t        \"key\"\n\t\t      ]\n\t\t    ], \n\t\t    \"name\": \"mapget_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": \"^@.list\", \n\t\t        \"t\": {\n\t\t          \"'\": [\n\t\t            \"^@.item\", \n\t\t            true\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"map_core\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"keys2map_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \":\": [\n\t\t          \"&&\", \n\t\t          \"^@.accum\", \n\t\t          {\n\t\t            \"true\": [\n\t\t              {\n\t\t                \":\": \"^@.item\"\n\t\t              }\n\t\t            ], \n\t\t            \"false\": [], \n\t\t            \"cond\": {\n\t\t              \":\": {\n\t\t                \"!\": \"^@.filter-t\"\n\t\t              }\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"filter_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": {\n\t\t              \"true\": true, \n\t\t              \"false\": {\n\t\t                \"'\": {\n\t\t                  \"!\": \"^*.hasitems_core_emlynoregan_com\", \n\t\t                  \"list\": {\n\t\t                    \"''\": {\n\t\t                      \"b\": \"^@.list\", \n\t\t                      \"&\": \"tail\"\n\t\t                    }\n\t\t                  }\n\t\t                }\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \"'\": {\n\t\t                  \"!\": \"^*.hasitems_core_emlynoregan_com\", \n\t\t                  \"list\": {\n\t\t                    \"''\": {\n\t\t                      \"b\": \"^@.list\", \n\t\t                      \"&\": \"head\"\n\t\t                    }\n\t\t                  }\n\t\t                }\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": false, \n\t\t          \"cond\": {\n\t\t            \"'\": {\n\t\t              \"a\": {\n\t\t                \"list\": \"^@.list\", \n\t\t                \"&\": \"len\"\n\t\t              }, \n\t\t              \"b\": 0, \n\t\t              \"&\": \">\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"false\": {\n\t\t        \"a\": \"^@.list\", \n\t\t        \"b\": null, \n\t\t        \"&\": \"!=\"\n\t\t      }, \n\t\t      \"cond\": {\n\t\t        \"'\": {\n\t\t          \"a\": \"list\", \n\t\t          \"b\": {\n\t\t            \"value\": \"^@.list\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"=\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"hasitems_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core\", \n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"filter-t\": {\n\t\t          \"'\": {\n\t\t            \"a\": \"^@.item\", \n\t\t            \"b\": \"^@.outeritem\", \n\t\t            \"&\": \"=\"\n\t\t          }\n\t\t        }, \n\t\t        \"list\": \"^@.list\", \n\t\t        \"outeritem\": \"^@.item\", \n\t\t        \"&\": \"filter_core\"\n\t\t      }, \n\t\t      \"&\": \"hasitems_core\"\n\t\t    }, \n\t\t    \"name\": \"isinlist_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isinlist_core\", \n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&!\", \n\t\t          {\n\t\t            \"item\": \"^@.item\", \n\t\t            \"list\": \"^@.arr2\", \n\t\t            \"&\": \"isinlist_core\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"list\": \"^@.arr1\", \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"subtractarrs_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"subtractarrs_core\", \n\t\t      \"map_core\", \n\t\t      \"mapget_core\", \n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": [\n\t\t          {\n\t\t            \"arr2\": \"^@.keys\", \n\t\t            \"arr1\": {\n\t\t              \"map\": \"^@.map\", \n\t\t              \"&\": \"keys\"\n\t\t            }, \n\t\t            \"&\": \"subtractarrs_core\"\n\t\t          }, \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"arr2\": \"^@.keys\", \n\t\t              \"arr1\": {\n\t\t                \"map\": \"^@.map\", \n\t\t                \"&\": \"keys\"\n\t\t              }, \n\t\t              \"&\": \"subtractarrs_core\"\n\t\t            }, \n\t\t            \"t\": {\n\t\t              \":\": {\n\t\t                \"key\": \"^@.item\", \n\t\t                \"&\": \"mapget_core\"\n\t\t              }\n\t\t            }, \n\t\t            \"&\": \"map_core\"\n\t\t          }\n\t\t        ], \n\t\t        \"&\": \"zip\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"removekeys_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": \"^@.item\", \n\t\t      \"list\": \"^@.pipeline-t\", \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": \"^@.item\", \n\t\t          \"item\": \"^@.accum\", \n\t\t          \"accum\": null\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"pipeline_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"value\": [\n\t\t        [\n\t\t          \"^@.item\", \n\t\t          {\n\t\t            \"!\": [\n\t\t              \"&&\", \n\t\t              {\n\t\t                \":\": \"^%\"\n\t\t              }, \n\t\t              {\n\t\t                \"value\": [\n\t\t                  [\n\t\t                    \":\", \n\t\t                    \"^@.map\"\n\t\t                  ]\n\t\t                ], \n\t\t                \"&\": \"makemap\"\n\t\t              }, \n\t\t              \"^@.item\"\n\t\t            ]\n\t\t          }\n\t\t        ]\n\t\t      ], \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"splitmapone_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": [\n\t\t        {\n\t\t          \"&\": \"keys\"\n\t\t        }, \n\t\t        {\n\t\t          \"&\": \"values\"\n\t\t        }\n\t\t      ], \n\t\t      \"&\": \"zip\"\n\t\t    }, \n\t\t    \"name\": \"unmakemap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\", \n\t\t      \"splitmapone_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"keys\"\n\t\t      }, \n\t\t      \"t\": \"^*.splitmapone_core\", \n\t\t      \"&\": \"map_core\"\n\t\t    }, \n\t\t    \"name\": \"splitmap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"filter_core\", \n\t\t      \"splitmap_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&!=\", \n\t\t          [\n\t\t            \"&head\", \n\t\t            {\n\t\t              \"map\": \"^@.item\", \n\t\t              \"&\": \"values\"\n\t\t            }\n\t\t          ], \n\t\t          null\n\t\t        ]\n\t\t      }, \n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"splitmap_core\"\n\t\t      }, \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"removenovaluemaps_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"removenovaluemaps_core\", \n\t\t      \"addmaps_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"removenovaluemaps_core\"\n\t\t      }, \n\t\t      \"accum\": {}, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"map2\": \"^@.item\", \n\t\t          \"map1\": \"^@.accum\", \n\t\t          \"&\": \"addmaps_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"removenullattribs_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"map\": {\n\t\t        \"value\": {\n\t\t          \"list\": [\n\t\t            \"^@.list\", \n\t\t            \"^@.list\"\n\t\t          ], \n\t\t          \"&\": \"zip\"\n\t\t        }, \n\t\t        \"&\": \"makemap\"\n\t\t      }, \n\t\t      \"&\": \"keys\"\n\t\t    }, \n\t\t    \"name\": \"removedupstrarr_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&=\", \n\t\t          [\n\t\t            \"&!\", \n\t\t            [\n\t\t              \"&!\", \n\t\t              \"^@.left\"\n\t\t            ]\n\t\t          ], \n\t\t          [\n\t\t            \"&<\", \n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^@\"\n\t\t                }, \n\t\t                [\n\t\t                  \"item\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }, \n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^@\"\n\t\t                }, \n\t\t                [\n\t\t                  \"head\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"head\": {\n\t\t        \"b\": \"^@.list\", \n\t\t        \"&\": \"head\"\n\t\t      }, \n\t\t      \"list\": {\n\t\t        \"b\": \"^@.list\", \n\t\t        \"&\": \"tail\"\n\t\t      }, \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"qsfilter_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"qsfilter_core\", \n\t\t      \"quicksort_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \":\": [\n\t\t          \"&&\", \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"left\": true, \n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"qsfilter_core\"\n\t\t            }, \n\t\t            \"&\": \"quicksort_core_emlynoregan_com\"\n\t\t          }, \n\t\t          [\n\t\t            {\n\t\t              \"b\": \"^@.list\", \n\t\t              \"&\": \"head\"\n\t\t            }\n\t\t          ], \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"left\": false, \n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"qsfilter_core\"\n\t\t            }, \n\t\t            \"&\": \"quicksort_core_emlynoregan_com\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"false\": [], \n\t\t      \"cond\": {\n\t\t        \":\": \"^@.list\"\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"quicksort_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"t\": {\n\t\t          \":\": [\n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^%\"\n\t\t                }, \n\t\t                [\n\t\t                  \"^@.item\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }, \n\t\t            \"^@.item\"\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"map_core\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"idlisttomap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"!\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": {\n\t\t                \"accum\": {\n\t\t                  \"index\": 0, \n\t\t                  \"result\": \"\"\n\t\t                }, \n\t\t                \"list\": \"^@.list\", \n\t\t                \"t\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"index\": 1, \n\t\t                        \"result\": \"^@.item\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.result\", \n\t\t                              \"^@.lastseparator\", \n\t\t                              \"^@.item\"\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.result\", \n\t\t                              \"^@.separator\", \n\t\t                              \"^@.item\"\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": [\n\t\t                            \"&=\", \n\t\t                            \"^@.listlen\", \n\t\t                            [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ]\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": [\n\t\t                        \"&=\", \n\t\t                        \"^@.accum.index\", \n\t\t                        0\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"&\": \"reduce\"\n\t\t              }\n\t\t            }, \n\t\t            \"false\": null, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.list\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"lastseparator\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.lastseparator\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": {\n\t\t              \"true\": {\n\t\t                \"'\": \"^@.separator\"\n\t\t              }, \n\t\t              \"false\": \" and \", \n\t\t              \"cond\": {\n\t\t                \"'\": \"^@.separator\"\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": \"^@.lastseparator\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }, \n\t\t        \"listlen\": {\n\t\t          \"list\": \"^@.list\", \n\t\t          \"&\": \"len\"\n\t\t        }, \n\t\t        \"separator\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.separator\"\n\t\t          }, \n\t\t          \"false\": \", \", \n\t\t          \"cond\": {\n\t\t            \"'\": \"^@.separator\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"join_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": [\n\t\t              \"^%\", \n\t\t              {\n\t\t                \"accum\": {\n\t\t                  \"index\": 0, \n\t\t                  \"result\": []\n\t\t                }, \n\t\t                \"list\": \"^@.list\", \n\t\t                \"t\": {\n\t\t                  \":\": {\n\t\t                    \"true\": {\n\t\t                      \":\": {\n\t\t                        \"index\": [\n\t\t                          \"&+\", \n\t\t                          \"^@.accum.index\", \n\t\t                          1\n\t\t                        ], \n\t\t                        \"result\": [\n\t\t                          \"&&\", \n\t\t                          \"^@.accum.result\", \n\t\t                          \"^@.item\"\n\t\t                        ]\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \":\": {\n\t\t                        \"index\": [\n\t\t                          \"&+\", \n\t\t                          \"^@.accum.index\", \n\t\t                          1\n\t\t                        ], \n\t\t                        \"result\": \"^@.accum.result\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \":\": [\n\t\t                        \"&&&\", \n\t\t                        [\n\t\t                          \"&>=\", \n\t\t                          \"^@.accum.index\", \n\t\t                          \"^@.start\"\n\t\t                        ], \n\t\t                        [\n\t\t                          \"&<\", \n\t\t                          \"^@.accum.index\", \n\t\t                          \"^@.stop\"\n\t\t                        ]\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"&\": \"reduce\"\n\t\t              }, \n\t\t              \"result\"\n\t\t            ]\n\t\t          }, \n\t\t          \"start\": {\n\t\t            \"!\": \"^@.fixarg\", \n\t\t            \"defaultarg\": 0, \n\t\t            \"arg\": \"^@.start\"\n\t\t          }, \n\t\t          \"stop\": {\n\t\t            \"!\": \"^@.fixarg\", \n\t\t            \"defaultarg\": {\n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"len\"\n\t\t            }, \n\t\t            \"arg\": \"^@.stop\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"fixarg\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": [\n\t\t                  \"&+\", \n\t\t                  {\n\t\t                    \"list\": \"^@.list\", \n\t\t                    \"&\": \"len\"\n\t\t                  }, \n\t\t                  \"^@.arg\"\n\t\t                ]\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.arg\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&<\", \n\t\t                  \"^@.arg\", \n\t\t                  0\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": \"^@.defaultarg\", \n\t\t          \"cond\": {\n\t\t            \":\": \"^@.arg\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"slice_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": null, \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.accum\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": \"^@.item\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": [\n\t\t              \"&!=\", \n\t\t              \"^@.accum\", \n\t\t              null\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"coalesce_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isinlist_core\"\n\t\t    ], \n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"accum\": {\n\t\t          \"found\": false, \n\t\t          \"result\": null\n\t\t        }, \n\t\t        \"list\": \"^@.cases\", \n\t\t        \"t\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": \"^@.accum\"\n\t\t            }, \n\t\t            \"false\": {\n\t\t              \"'\": {\n\t\t                \"true\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"found\": true, \n\t\t                            \"result\": \"^@.item.1\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": \"^@.accum\"\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": {\n\t\t                            \"!\": \"^*.isinlist_core\", \n\t\t                            \"item\": \"^@.value\", \n\t\t                            \"list\": \"^@.item.0\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"found\": true, \n\t\t                            \"result\": \"^@.item.1\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": \"^@.accum\"\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": [\n\t\t                            \"&=\", \n\t\t                            \"^@.item.0\", \n\t\t                            \"^@.value\"\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": [\n\t\t                        \"&=\", \n\t\t                        {\n\t\t                          \"value\": \"^@.item.0\", \n\t\t                          \"&\": \"type\"\n\t\t                        }, \n\t\t                        \"list\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \"'\": {\n\t\t                    \"found\": true, \n\t\t                    \"result\": \"^@.item\"\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \"'\": [\n\t\t                    \"&&&\", \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"value\": \"^@.item\", \n\t\t                        \"&\": \"type\"\n\t\t                      }, \n\t\t                      \"list\"\n\t\t                    ], \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"list\": \"^@.item\", \n\t\t                        \"&\": \"len\"\n\t\t                      }, \n\t\t                      2\n\t\t                    ]\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            }, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.accum.found\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"switch_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"accum\": {\n\t\t          \"found\": false, \n\t\t          \"result\": null\n\t\t        }, \n\t\t        \"list\": \"^@.cases\", \n\t\t        \"t\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": \"^@.accum\"\n\t\t            }, \n\t\t            \"false\": {\n\t\t              \"'\": {\n\t\t                \"true\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"found\": true, \n\t\t                        \"result\": {\n\t\t                          \"!\": \"^@.item.1\"\n\t\t                        }\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": \"^@.accum\"\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": {\n\t\t                        \"!\": {\n\t\t                          \"!\": \"^@.item.0\"\n\t\t                        }\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \"'\": {\n\t\t                    \"found\": true, \n\t\t                    \"result\": {\n\t\t                      \"!\": \"^@.item\"\n\t\t                    }\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \"'\": [\n\t\t                    \"&&&\", \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"value\": \"^@.item\", \n\t\t                        \"&\": \"type\"\n\t\t                      }, \n\t\t                      \"list\"\n\t\t                    ], \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"list\": \"^@.item\", \n\t\t                        \"&\": \"len\"\n\t\t                      }, \n\t\t                      2\n\t\t                    ]\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            }, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.accum.found\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"when_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"&=\", \n\t\t      {\n\t\t        \"value\": \"^@.item\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"map\"\n\t\t    ], \n\t\t    \"name\": \"isdict_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"&=\", \n\t\t      {\n\t\t        \"value\": \"^@.item\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"list\"\n\t\t    ], \n\t\t    \"name\": \"islist_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isdict_core\", \n\t\t      \"islist_core\"\n\t\t    ], \n\t\t    \"transform-t\": [\n\t\t      \"&!\", \n\t\t      [\n\t\t        \"&||\", \n\t\t        {\n\t\t          \"&\": \"isdict_core\"\n\t\t        }, \n\t\t        {\n\t\t          \"&\": \"islist_core\"\n\t\t        }\n\t\t      ]\n\t\t    ], \n\t\t    \"name\": \"issimple_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core\", \n\t\t      \"isdict_core\", \n\t\t      \"islist_core\", \n\t\t      \"switch_core\", \n\t\t      \"map_core\", \n\t\t      \"isinlist_core\", \n\t\t      \"newdiff_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.value\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": {\n\t\t                  \"!\": \"^@.keepvalue\"\n\t\t                }\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"value\": {\n\t\t            \"cases\": [\n\t\t              [\n\t\t                \"map\", \n\t\t                {\n\t\t                  \"true\": {\n\t\t                    \":\": {\n\t\t                      \"value\": {\n\t\t                        \"list\": {\n\t\t                          \"map\": \"^@.new\", \n\t\t                          \"&\": \"keys\"\n\t\t                        }, \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"true\": {\n\t\t                              \":\": {\n\t\t                                \"true\": null, \n\t\t                                \"false\": {\n\t\t                                  \":\": {\n\t\t                                    \"!\": {\n\t\t                                      \":\": {\n\t\t                                        \"true\": {\n\t\t                                          \":\": [\n\t\t                                            \"^@.item\", \n\t\t                                            \"^@.value\"\n\t\t                                          ]\n\t\t                                        }, \n\t\t                                        \"cond\": {\n\t\t                                          \":\": {\n\t\t                                            \"!\": \"^@.keepvalue\"\n\t\t                                          }\n\t\t                                        }, \n\t\t                                        \"&\": \"if\"\n\t\t                                      }\n\t\t                                    }, \n\t\t                                    \"value\": {\n\t\t                                      \"new\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.new\", \n\t\t                                        \"^@.item\"\n\t\t                                      ], \n\t\t                                      \"old\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.old\", \n\t\t                                        \"^@.item\"\n\t\t                                      ], \n\t\t                                      \"&\": \"newdiff_core\"\n\t\t                                    }\n\t\t                                  }\n\t\t                                }, \n\t\t                                \"cond\": {\n\t\t                                  \":\": [\n\t\t                                    \"&=\", \n\t\t                                    [\n\t\t                                      \"^%\", \n\t\t                                      \"^@.new\", \n\t\t                                      \"^@.item\"\n\t\t                                    ], \n\t\t                                    [\n\t\t                                      \"^%\", \n\t\t                                      \"^@.old\", \n\t\t                                      \"^@.item\"\n\t\t                                    ]\n\t\t                                  ]\n\t\t                                }, \n\t\t                                \"&\": \"if\"\n\t\t                              }\n\t\t                            }, \n\t\t                            \"false\": {\n\t\t                              \":\": [\n\t\t                                \"^@.item\", \n\t\t                                [\n\t\t                                  \"^%\", \n\t\t                                  \"^@.new\", \n\t\t                                  \"^@.item\"\n\t\t                                ]\n\t\t                              ]\n\t\t                            }, \n\t\t                            \"cond\": {\n\t\t                              \":\": {\n\t\t                                \"list\": {\n\t\t                                  \"map\": \"^@.old\", \n\t\t                                  \"&\": \"keys\"\n\t\t                                }, \n\t\t                                \"&\": \"isinlist_core\"\n\t\t                              }\n\t\t                            }, \n\t\t                            \"&\": \"if\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"makemap\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"false\": {\n\t\t                    \":\": \"^@.new\"\n\t\t                  }, \n\t\t                  \"cond\": {\n\t\t                    \":\": {\n\t\t                      \"item\": \"^@.old\", \n\t\t                      \"&\": \"isdict_core\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"if\"\n\t\t                }\n\t\t              ], \n\t\t              [\n\t\t                \"list\", \n\t\t                {\n\t\t                  \"!\": {\n\t\t                    \":\": {\n\t\t                      \"true\": {\n\t\t                        \":\": \"^@.list\"\n\t\t                      }, \n\t\t                      \"false\": [], \n\t\t                      \"cond\": {\n\t\t                        \":\": {\n\t\t                          \"&\": \"hasitems_core\"\n\t\t                        }\n\t\t                      }, \n\t\t                      \"&\": \"if\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"list\": {\n\t\t                    \"true\": {\n\t\t                      \":\": [\n\t\t                        \"^%\", \n\t\t                        {\n\t\t                          \"accum\": {\n\t\t                            \"index\": 0, \n\t\t                            \"result\": []\n\t\t                          }, \n\t\t                          \"list\": \"^@.new\", \n\t\t                          \"t\": {\n\t\t                            \":\": {\n\t\t                              \"index\": [\n\t\t                                \"&+\", \n\t\t                                \"^@.accum.index\", \n\t\t                                1\n\t\t                              ], \n\t\t                              \"result\": [\n\t\t                                \"&&\", \n\t\t                                \"^@.accum.result\", \n\t\t                                [\n\t\t                                  {\n\t\t                                    \"!\": {\n\t\t                                      \":\": {\n\t\t                                        \"true\": {\n\t\t                                          \":\": \"^@.value\"\n\t\t                                        }, \n\t\t                                        \"cond\": {\n\t\t                                          \":\": {\n\t\t                                            \"!\": \"^@.keepvalue\"\n\t\t                                          }\n\t\t                                        }, \n\t\t                                        \"&\": \"if\"\n\t\t                                      }\n\t\t                                    }, \n\t\t                                    \"value\": {\n\t\t                                      \"new\": \"^@.item\", \n\t\t                                      \"old\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.old\", \n\t\t                                        \"^@.accum.index\"\n\t\t                                      ], \n\t\t                                      \"&\": \"newdiff_core\"\n\t\t                                    }\n\t\t                                  }\n\t\t                                ]\n\t\t                              ]\n\t\t                            }\n\t\t                          }, \n\t\t                          \"&\": \"reduce\"\n\t\t                        }, \n\t\t                        \"result\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \":\": \"^@.new\"\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \":\": {\n\t\t                        \"item\": \"^@.old\", \n\t\t                        \"&\": \"islist_core\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }\n\t\t              ], \n\t\t              {\n\t\t                \"false\": {\n\t\t                  \":\": \"^@.new\"\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \":\": [\n\t\t                    \"&=\", \n\t\t                    \"^@.new\", \n\t\t                    \"^@.old\"\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            ], \n\t\t            \"value\": {\n\t\t              \"value\": \"^@.new\", \n\t\t              \"&\": \"type\"\n\t\t            }, \n\t\t            \"&\": \"switch_core\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"keepvalue\": {\n\t\t        \":\": [\n\t\t          \"&||\", \n\t\t          \"^@.value\", \n\t\t          [\n\t\t            \"&!\", \n\t\t            {\n\t\t              \"item\": {\n\t\t                \"&\": \"type\"\n\t\t              }, \n\t\t              \"list\": [\n\t\t                \"null\", \n\t\t                \"map\", \n\t\t                \"list\"\n\t\t              ], \n\t\t              \"&\": \"isinlist_core\"\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"newdiff_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": \"^@.item\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \":\": \"^@.accum\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \":\": [\n\t\t              \"&>\", \n\t\t              {\n\t\t                \"list\": \"^@.item\", \n\t\t                \"&\": \"len\"\n\t\t              }, \n\t\t              {\n\t\t                \"list\": \"^@.accum\", \n\t\t                \"&\": \"len\"\n\t\t              }\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"longest_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"applynewdiff_core\", \n\t\t      \"when_core\", \n\t\t      \"removedupstrarr_core\", \n\t\t      \"map_core\", \n\t\t      \"longest_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  null, \n\t\t                  \"^@.diff\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": \"^@.old\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&!=\", \n\t\t                  \"^@.oldtype\", \n\t\t                  \"^@.difftype\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": \"^@.diff\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  \"^@.difftype\", \n\t\t                  \"map\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": {\n\t\t                  \"!\": {\n\t\t                    \":\": {\n\t\t                      \"value\": {\n\t\t                        \"list\": \"^@.keys\", \n\t\t                        \"t\": {\n\t\t                          \":\": [\n\t\t                            \"^@.item\", \n\t\t                            {\n\t\t                              \"diff\": [\n\t\t                                \"^@\", \n\t\t                                \"diff\", \n\t\t                                \"^@.item\"\n\t\t                              ], \n\t\t                              \"old\": [\n\t\t                                \"^@\", \n\t\t                                \"old\", \n\t\t                                \"^@.item\"\n\t\t                              ], \n\t\t                              \"&\": \"applynewdiff_core\"\n\t\t                            }\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"makemap\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"keys\": {\n\t\t                    \"list\": [\n\t\t                      \"&&\", \n\t\t                      {\n\t\t                        \"map\": \"^@.old\", \n\t\t                        \"&\": \"keys\"\n\t\t                      }, \n\t\t                      {\n\t\t                        \"map\": \"^@.diff\", \n\t\t                        \"&\": \"keys\"\n\t\t                      }\n\t\t                    ], \n\t\t                    \"&\": \"removedupstrarr_core\"\n\t\t                  }\n\t\t                }\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  \"^@.difftype\", \n\t\t                  \"list\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": {\n\t\t                  \"!\": {\n\t\t                    \":\": [\n\t\t                      \"^%\", \n\t\t                      {\n\t\t                        \"list\": \"^@.longestlist\", \n\t\t                        \"accum\": {\n\t\t                          \"index\": 0, \n\t\t                          \"result\": []\n\t\t                        }, \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&&\", \n\t\t                              \"^@.accum.result\", \n\t\t                              {\n\t\t                                \"diff\": [\n\t\t                                  \"^@\", \n\t\t                                  \"diff\", \n\t\t                                  \"^@.accum.index\"\n\t\t                                ], \n\t\t                                \"old\": [\n\t\t                                  \"^@\", \n\t\t                                  \"old\", \n\t\t                                  \"^@.accum.index\"\n\t\t                                ], \n\t\t                                \"&\": \"applynewdiff_core\"\n\t\t                              }\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"reduce\"\n\t\t                      }, \n\t\t                      \"result\"\n\t\t                    ]\n\t\t                  }, \n\t\t                  \"longestlist\": {\n\t\t                    \"list\": [\n\t\t                      \"^@.old\", \n\t\t                      \"^@.diff\"\n\t\t                    ], \n\t\t                    \"&\": \"longest_core\"\n\t\t                  }\n\t\t                }\n\t\t              }\n\t\t            ], \n\t\t            {\n\t\t              \":\": \"^@.diff\"\n\t\t            }\n\t\t          ], \n\t\t          \"&\": \"when_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"oldtype\": {\n\t\t        \"value\": \"^@.old\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"difftype\": {\n\t\t        \"value\": \"^@.diff\", \n\t\t        \"&\": \"type\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"applynewdiff_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": null, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": {\n\t\t              \"value\": [\n\t\t                [\n\t\t                  \"!!\", \n\t\t                  {\n\t\t                    \"value\": [\n\t\t                      [\n\t\t                        \":\", \n\t\t                        \"^@.item\"\n\t\t                      ]\n\t\t                    ], \n\t\t                    \"&\": \"makemap\"\n\t\t                  }\n\t\t                ], \n\t\t                [\n\t\t                  \"s\", \n\t\t                  \"^@.accum\"\n\t\t                ]\n\t\t              ], \n\t\t              \"&\": \"makemap\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \":\": \"^@.item\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \":\": \"^@.accum\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"combine_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"combine_core\", \n\t\t      \"keys2map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"requires\": {\n\t\t        \"map\": {\n\t\t          \"list\": {\n\t\t            \"!\": {\n\t\t              \"accum\": {\n\t\t                \":\": [\n\t\t                  \"&&\"\n\t\t                ]\n\t\t              }, \n\t\t              \"list\": \"&@.list.*.requires\", \n\t\t              \"t\": {\n\t\t                \":\": [\n\t\t                  \"&&\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.item\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"reduce\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"keys2map_core\"\n\t\t        }, \n\t\t        \"&\": \"keys\"\n\t\t      }, \n\t\t      \"transform-t\": {\n\t\t        \"list\": \"&@.list.*.transform-t\", \n\t\t        \"&\": \"combine_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"declcombine_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": 0, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.accum\"\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.item\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&>=\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.item\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"max_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": 0, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.accum\"\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.itemlen\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&>=\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.itemlen\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"itemlen\": {\n\t\t            \"list\": \"^@.item\", \n\t\t            \"&\": \"len\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"lenmax_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"coalesce_core\", \n\t\t      \"traverse_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"value\": {\n\t\t                  \"accum\": [], \n\t\t                  \"list\": {\n\t\t                    \"map\": \"^@.source\", \n\t\t                    \"&\": \"keys\"\n\t\t                  }, \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"!\": {\n\t\t                        \":\": [\n\t\t                          \"&&\", \n\t\t                          \"^@.accum\", \n\t\t                          [\n\t\t                            [\n\t\t                              \"^@.item\", \n\t\t                              {\n\t\t                                \"source\": \"^@.transformedvalue\", \n\t\t                                \"&\": \"traverse_core_emlynoregan_com\"\n\t\t                              }\n\t\t                            ]\n\t\t                          ]\n\t\t                        ]\n\t\t                      }, \n\t\t                      \"transformedvalue\": {\n\t\t                        \"!\": \"^@.traverse-t\", \n\t\t                        \"value\": [\n\t\t                          \"^@\", \n\t\t                          \"source\", \n\t\t                          \"^@.item\"\n\t\t                        ], \n\t\t                        \"key\": \"^@.item\"\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"&\": \"makemap\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              [\n\t\t                \"^%\", \n\t\t                {\n\t\t                  \"accum\": {\n\t\t                    \"index\": 0, \n\t\t                    \"result\": []\n\t\t                  }, \n\t\t                  \"list\": \"^@.source\", \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"index\": [\n\t\t                        \"&+\", \n\t\t                        \"^@.index\", \n\t\t                        1\n\t\t                      ], \n\t\t                      \"result\": {\n\t\t                        \"!\": {\n\t\t                          \":\": [\n\t\t                            \"&&\", \n\t\t                            \"^@.accum.result\", \n\t\t                            [\n\t\t                              {\n\t\t                                \"source\": \"^@.transformedvalue\", \n\t\t                                \"&\": \"traverse_core_emlynoregan_com\"\n\t\t                              }\n\t\t                            ]\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"transformedvalue\": {\n\t\t                          \"!\": \"^@.traverse-t\", \n\t\t                          \"value\": \"^@.item\", \n\t\t                          \"key\": \"^@.index\"\n\t\t                        }\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"result\"\n\t\t              ]\n\t\t            ], \n\t\t            {\n\t\t              \"!\": \"^@.traverse-t\", \n\t\t              \"value\": \"^@.source\"\n\t\t            }\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.source\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"traverse-t\": {\n\t\t        \"list\": [\n\t\t          \"^@.traverse-t\", \n\t\t          \"^@.t\"\n\t\t        ], \n\t\t        \"&\": \"coalesce_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"traverse_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"coalesce_core\", \n\t\t      \"filttrav_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"value\": {\n\t\t                  \"accum\": [], \n\t\t                  \"list\": {\n\t\t                    \"map\": \"^@.source\", \n\t\t                    \"&\": \"keys\"\n\t\t                  }, \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"!\": {\n\t\t                        \":\": {\n\t\t                          \"true\": {\n\t\t                            \":\": [\n\t\t                              \"&&\", \n\t\t                              \"^@.accum\", \n\t\t                              [\n\t\t                                [\n\t\t                                  \"^@.item\", \n\t\t                                  {\n\t\t                                    \"source\": [\n\t\t                                      \"^@\", \n\t\t                                      \"source\", \n\t\t                                      \"^@.item\"\n\t\t                                    ], \n\t\t                                    \"&\": \"filttrav_core_emlynoregan_com\"\n\t\t                                  }\n\t\t                                ]\n\t\t                              ]\n\t\t                            ]\n\t\t                          }, \n\t\t                          \"false\": {\n\t\t                            \":\": \"^@.accum\"\n\t\t                          }, \n\t\t                          \"cond\": {\n\t\t                            \":\": \"^@.keepvalue\"\n\t\t                          }, \n\t\t                          \"&\": \"if\"\n\t\t                        }\n\t\t                      }, \n\t\t                      \"keepvalue\": {\n\t\t                        \"!\": \"^@.filter-t\", \n\t\t                        \"value\": [\n\t\t                          \"^@\", \n\t\t                          \"source\", \n\t\t                          \"^@.item\"\n\t\t                        ], \n\t\t                        \"key\": \"^@.item\"\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"&\": \"makemap\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              [\n\t\t                \"^%\", \n\t\t                {\n\t\t                  \"accum\": {\n\t\t                    \"index\": 0, \n\t\t                    \"result\": []\n\t\t                  }, \n\t\t                  \"list\": \"^@.source\", \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"index\": [\n\t\t                        \"&+\", \n\t\t                        \"^@.index\", \n\t\t                        1\n\t\t                      ], \n\t\t                      \"result\": {\n\t\t                        \"!\": {\n\t\t                          \":\": {\n\t\t                            \"true\": {\n\t\t                              \":\": [\n\t\t                                \"&&\", \n\t\t                                \"^@.accum.result\", \n\t\t                                {\n\t\t                                  \"source\": \"^@.item\", \n\t\t                                  \"&\": \"filttrav_core_emlynoregan_com\"\n\t\t                                }\n\t\t                              ]\n\t\t                            }, \n\t\t                            \"false\": {\n\t\t                              \":\": \"^@.accum.result\"\n\t\t                            }, \n\t\t                            \"cond\": {\n\t\t                              \":\": \"^@.keepvalue\"\n\t\t                            }, \n\t\t                            \"&\": \"if\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"keepvalue\": {\n\t\t                          \"!\": \"^@.filter-t\", \n\t\t                          \"value\": \"^@.item\", \n\t\t                          \"key\": \"^@.index\"\n\t\t                        }\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"result\"\n\t\t              ]\n\t\t            ], \n\t\t            \"^@.source\"\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.source\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"filter-t\": {\n\t\t        \"list\": [\n\t\t          \"^@.filter-t\", \n\t\t          \"^@.t\"\n\t\t        ], \n\t\t        \"&\": \"coalesce_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"filttrav_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"removenullattribs_core\", \n\t\t      \"addmaps_core\", \n\t\t      \"meta_core\", \n\t\t      \"removekeys_core\", \n\t\t      \"unmakemap_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"map2\": {\n\t\t                  \"map\": {\n\t\t                    \"value\": [\n\t\t                      [\n\t\t                        \"!\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-!\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"!!\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-!!\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \":\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-:\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"'\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-'\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"&&\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-&&\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"&\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-&\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ]\n\t\t                    ], \n\t\t                    \"&\": \"makemap\"\n\t\t                  }, \n\t\t                  \"&\": \"removenullattribs_core\"\n\t\t                }, \n\t\t                \"map1\": {\n\t\t                  \"keys\": [\n\t\t                    \"-!\", \n\t\t                    \"-!!\", \n\t\t                    \"-&\", \n\t\t                    \"-&&\", \n\t\t                    \"-:\", \n\t\t                    \"-'\"\n\t\t                  ], \n\t\t                  \"map\": {\n\t\t                    \"value\": {\n\t\t                      \"list\": {\n\t\t                        \"map\": \"^@.t\", \n\t\t                        \"&\": \"unmakemap_core\"\n\t\t                      }, \n\t\t                      \"t\": {\n\t\t                        \":\": [\n\t\t                          [\n\t\t                            \"^%\", \n\t\t                            \"^@.item\", \n\t\t                            0\n\t\t                          ], \n\t\t                          {\n\t\t                            \"t\": [\n\t\t                              \"^%\", \n\t\t                              \"^@.item\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"&\": \"meta_core\"\n\t\t                          }\n\t\t                        ]\n\t\t                      }, \n\t\t                      \"&\": \"map_core\"\n\t\t                    }, \n\t\t                    \"&\": \"makemap\"\n\t\t                  }, \n\t\t                  \"&\": \"removekeys_core\"\n\t\t                }, \n\t\t                \"&\": \"addmaps_core\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              {\n\t\t                \"true\": {\n\t\t                  \":\": [\n\t\t                    \"&&\", \n\t\t                    {\n\t\t                      \":\": [\n\t\t                        \"&&\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    {\n\t\t                      \"b\": {\n\t\t                        \"list\": \"^@.t\", \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"t\": \"^@.item\", \n\t\t                            \"&\": \"meta_core\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"tail\"\n\t\t                    }\n\t\t                  ]\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \":\": {\n\t\t                    \"list\": \"^@.t\", \n\t\t                    \"t\": {\n\t\t                      \":\": {\n\t\t                        \"t\": \"^@.item\", \n\t\t                        \"&\": \"meta_core\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"map_core\"\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \":\": [\n\t\t                    \"&=\", \n\t\t                    [\n\t\t                      \"^%\", \n\t\t                      \"^@.t\", \n\t\t                      0\n\t\t                    ], \n\t\t                    \"-&&\"\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            ], \n\t\t            \"^@.t\"\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.t\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"cond\": {\n\t\t        \":\": [\n\t\t          \"&!=\", \n\t\t          \"^@.t\", \n\t\t          null\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"meta_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }\n\t\t]\n\t\t";
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var TestsGet = function() {
	haxe_unit_TestCase.call(this);
};
TestsGet.__name__ = ["TestsGet"];
TestsGet.__super__ = haxe_unit_TestCase;
TestsGet.prototype = $extend(haxe_unit_TestCase.prototype,{
	testGet1: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("{\"fred\": 2}");
		var result = Util3.get(obj,"fred","zzz");
		this.assertEquals(2,result,{ fileName : "TestsGet.hx", lineNumber : 11, className : "TestsGet", methodName : "testGet1"});
	}
	,testGetDefault: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("{\"george\": 2}");
		var result = Util3.get(obj,"fred","zzz");
		this.assertEquals("zzz",result,{ fileName : "TestsGet.hx", lineNumber : 23, className : "TestsGet", methodName : "testGetDefault"});
	}
	,testGetArray: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("[{\"fred\": 2}]");
		var result = Util3.get(obj,"fred","isarray");
		this.assertEquals("isarray",result,{ fileName : "TestsGet.hx", lineNumber : 35, className : "TestsGet", methodName : "testGetArray"});
	}
	,testGetSimple: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("1");
		var result = Util3.get(obj,"fred","isnumber");
		this.assertEquals("isnumber",result,{ fileName : "TestsGet.hx", lineNumber : 46, className : "TestsGet", methodName : "testGetSimple"});
	}
	,testGetNull: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("null");
		var result = Util3.get(obj,"fred","isnull");
		this.assertEquals("isnull",result,{ fileName : "TestsGet.hx", lineNumber : 57, className : "TestsGet", methodName : "testGetNull"});
	}
	,testGetNoDefault: function() {
		var s = new Sutl();
		var obj = new haxe_ds_StringMap();
		obj = JSON.parse("{\"george\": 3}");
		var result = Util3.get(obj,"fred");
		this.assertEquals(null,result,{ fileName : "TestsGet.hx", lineNumber : 68, className : "TestsGet", methodName : "testGetNoDefault"});
	}
	,__class__: TestsGet
});
var TestsHelloWorld = function() {
	haxe_unit_TestCase.call(this);
};
TestsHelloWorld.__name__ = ["TestsHelloWorld"];
TestsHelloWorld.__super__ = haxe_unit_TestCase;
TestsHelloWorld.prototype = $extend(haxe_unit_TestCase.prototype,{
	testHelloWorld: function() {
		this.assertTrue(true,{ fileName : "TestsHelloWorld.hx", lineNumber : 5, className : "TestsHelloWorld", methodName : "testHelloWorld"});
	}
	,__class__: TestsHelloWorld
});
var Tests_$Builtins = function() {
	haxe_unit_TestCase.call(this);
};
Tests_$Builtins.__name__ = ["Tests_Builtins"];
Tests_$Builtins.__super__ = haxe_unit_TestCase;
Tests_$Builtins.prototype = $extend(haxe_unit_TestCase.prototype,{
	callbuiltin: function(builtinname,aa,bb,expected) {
		var scope = { "a" : aa, "b" : bb};
		this.callbuiltin2(builtinname,scope,expected);
	}
	,callbuiltin2: function(builtinname,scope,expected) {
		var s = new Sutl();
		var builtins = s.builtins();
		var f = Util3.get(builtins,builtinname);
		this.assertTrue(f != null,{ fileName : "Tests_Builtins.hx", lineNumber : 21, className : "Tests_Builtins", methodName : "callbuiltin2"});
		var result = f(null,scope,null,null,null,null,null);
		try {
			this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Builtins.hx", lineNumber : 27, className : "Tests_Builtins", methodName : "callbuiltin2"});
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
			if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
			haxe_Log.trace(expected,{ fileName : "Tests_Builtins.hx", lineNumber : 31, className : "Tests_Builtins", methodName : "callbuiltin2"});
			haxe_Log.trace(result,{ fileName : "Tests_Builtins.hx", lineNumber : 32, className : "Tests_Builtins", methodName : "callbuiltin2"});
			throw js__$Boot_HaxeError.wrap(ex);
		}
	}
	,callbuiltin3: function(builtinname,scope,parentscope,l,src,tt,expected) {
		var s = new Sutl();
		var builtins = s.builtins();
		var f = Util3.get(builtins,builtinname);
		this.assertTrue(f != null,{ fileName : "Tests_Builtins.hx", lineNumber : 45, className : "Tests_Builtins", methodName : "callbuiltin3"});
		var result = f(parentscope,scope,l,src,tt,null,null);
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Builtins.hx", lineNumber : 49, className : "Tests_Builtins", methodName : "callbuiltin3"});
	}
	,test_plus: function() {
		this.callbuiltin("+",4.2,6,10.2);
	}
	,test_plus2: function() {
		this.callbuiltin("+","first","second","firstsecond");
	}
	,test_minus: function() {
		this.callbuiltin("-",3,2,1);
	}
	,test_mult: function() {
		this.callbuiltin("x",3,2,6);
	}
	,test_div: function() {
		this.callbuiltin("/",3,2,1.5);
	}
	,test_equal: function() {
		this.callbuiltin("=","freddo","freddo",true);
	}
	,test_notequal: function() {
		this.callbuiltin("!=","freddo","Freddo",true);
	}
	,test_notequal2: function() {
		this.callbuiltin("!=",false,0,true);
	}
	,test_ge: function() {
		this.callbuiltin(">=",14,5,true);
	}
	,test_le: function() {
		this.callbuiltin("<=",14,5,false);
	}
	,test_gt: function() {
		this.callbuiltin(">",14,5,true);
	}
	,test_lt: function() {
		this.callbuiltin("<",14,14,false);
	}
	,test_and: function() {
		this.callbuiltin("&&",true,true,true);
		this.callbuiltin("&&",true,false,false);
		this.callbuiltin("&&",false,true,false);
		this.callbuiltin("&&",false,false,false);
	}
	,test_or: function() {
		this.callbuiltin("||",true,0,true);
		this.callbuiltin("||",1,false,true);
		this.callbuiltin("||",false,"x",true);
		this.callbuiltin("||",null,false,false);
	}
	,test_not: function() {
		this.callbuiltin("!",null,true,false);
		this.callbuiltin("!",null,false,true);
	}
	,test_if: function() {
		var scope = { "cond" : true, "true" : "expected"};
		this.callbuiltin2("if",scope,"expected");
	}
	,test_if2: function() {
		var scope = { "false" : "expected"};
		this.callbuiltin2("if",scope,"expected");
	}
	,test_keys: function() {
		var scope = { "map" : { "x" : 1, "y" : 2, "z" : 3}};
		this.callbuiltin2("keys",scope,["x","y","z"]);
	}
	,test_values: function() {
		var scope = { "map" : { "x" : 1, "y" : 2, "z" : 3}};
		this.callbuiltin2("values",scope,[1,2,3]);
	}
	,test_len: function() {
		var scope = { "list" : [1,2,3,4,5]};
		this.callbuiltin2("len",scope,5);
	}
	,test_len2: function() {
		var scope = { "value" : "xyz"};
		this.callbuiltin2("len",scope,3);
	}
	,test_type: function() {
		var scope = { "value" : "xyz"};
		this.callbuiltin2("type",scope,"string");
	}
	,test_makemap: function() {
		var entry1 = ["a",1];
		var entry2 = ["b","two"];
		var entry3 = ["c",3];
		var scope = { "value" : [entry1,entry2,entry3]};
		this.callbuiltin2("makemap",scope,{ "a" : 1, "b" : "two", "c" : 3});
	}
	,test_reduce: function() {
		var scope = { "list" : [1,2,3], "t" : "transform"};
		this.callbuiltin2("reduce",scope,"transform");
	}
	,test_reduce2: function() {
		var scope = { "list" : "hello", "t" : "transform"};
		this.callbuiltin2("reduce",scope,"transform");
	}
	,test_pathsrc: function() {
		var scope = { "a" : "x", "b" : "y"};
		var src = { "x" : { "y" : 1}};
		this.callbuiltin3("$",scope,null,null,src,null,[1]);
	}
	,test_pathscope: function() {
		var scope = { "a" : "x", "b" : "y"};
		var parentscope = { "x" : { "y" : 1}};
		this.callbuiltin3("@",scope,parentscope,null,null,null,[1]);
	}
	,test_pathlib: function() {
		var scope = { "a" : "x", "b" : "y"};
		var lib = { "x" : { "y" : 1}};
		this.callbuiltin3("*",scope,null,lib,null,null,[1]);
	}
	,test_pathraw: function() {
		var scope = { "a" : { "x" : { "y" : 1}}, "b" : "x"};
		this.callbuiltin2("%",scope,[{ "y" : 1}]);
	}
	,test_head: function() {
		var scope = { "b" : [1,2,3]};
		this.callbuiltin2("head",scope,1);
	}
	,test_tail: function() {
		var scope = { "b" : [1,2,3]};
		this.callbuiltin2("tail",scope,[2,3]);
	}
	,test_split: function() {
		var scope = { "value" : "three,distinct,items"};
		this.callbuiltin2("split",scope,["three","distinct","items"]);
	}
	,test_split2: function() {
		var scope = { "value" : "three-distinct-items", "sep" : "-", "max" : 2};
		this.callbuiltin2("split",scope,["three","distinct-items"]);
	}
	,test_trim: function() {
		var scope = { "value" : "  \t  fne rgle      \n    "};
		this.callbuiltin2("trim",scope,"fne rgle");
	}
	,test_pos: function() {
		var scope = { "value" : "the quick brown fox", "sub" : "quick"};
		this.callbuiltin2("pos",scope,4);
	}
	,test_string1: function() {
		var scope = { "value" : "the quick brown fox"};
		this.callbuiltin2("string",scope,"the quick brown fox");
	}
	,test_string2: function() {
		var scope = { "value" : 32};
		this.callbuiltin2("string",scope,"32");
	}
	,test_string3: function() {
		var scope = { "value" : 47.456};
		this.callbuiltin2("string",scope,"47.456");
	}
	,test_string4: function() {
		var scope = { "value" : true};
		this.callbuiltin2("string",scope,"true");
	}
	,test_string5: function() {
		var scope = { "value" : null};
		this.callbuiltin2("string",scope,"null");
	}
	,test_number1: function() {
		var scope = { "value" : "47"};
		this.callbuiltin2("number",scope,47);
	}
	,test_number2: function() {
		var scope = { "value" : "47.5"};
		this.callbuiltin2("number",scope,47.5);
	}
	,test_number3: function() {
		var scope = { "value" : 47};
		this.callbuiltin2("number",scope,47);
	}
	,test_number4: function() {
		var scope = { "value" : true};
		this.callbuiltin2("number",scope,1);
	}
	,test_number5: function() {
		var scope = { "value" : false};
		this.callbuiltin2("number",scope,0);
	}
	,test_boolean1: function() {
		var scope = { "value" : false};
		this.callbuiltin2("boolean",scope,false);
	}
	,test_boolean2: function() {
		var scope = { "value" : []};
		this.callbuiltin2("boolean",scope,false);
	}
	,test_boolean3: function() {
		var scope = { "value" : "x"};
		this.callbuiltin2("boolean",scope,true);
	}
	,test_boolean4: function() {
		var scope = { "value" : 1};
		this.callbuiltin2("boolean",scope,true);
	}
	,test_boolean5: function() {
		var scope = { "value" : 0};
		this.callbuiltin2("boolean",scope,false);
	}
	,__class__: Tests_$Builtins
});
var Tests_$Decls = function() {
	this._coreDist = null;
	haxe_unit_TestCase.call(this);
};
Tests_$Decls.__name__ = ["Tests_Decls"];
Tests_$Decls.GetSource = function() {
	var _sourceArr1 = [1,2,[3,4]];
	var _source = { "updated" : 1438517599342400, "apkey" : "2a02d608-6431-40aa-b0b2-91bf5f48cd84", "stored" : 1438313529667260, "eventkeyid" : "3a300a90-eca4-e101-383d-6bfd5990d791", "key" : "244de280-a01a-c5da-4162-ced9775246a5", "clientkey" : "82b25cfa-f0ec-4f44-9209-77cbd98edd6a", "docalt" : _sourceArr1, "invalid" : false, "document" : { "description" : "stuff", "themeindex" : 6, "eventkeyid" : "3a300a90-eca4-e101-383d-6bfd5990d791", "published" : true, "type" : "Metric_update", "name" : "thingo"}, "type" : "CachedObject", "indexnames" : ["82B25CFA-F0EC-4F44-9209-77CBD98EDD6A-Metric"], "objecttype" : "Metric"};
	return _source;
};
Tests_$Decls.__super__ = haxe_unit_TestCase;
Tests_$Decls.prototype = $extend(haxe_unit_TestCase.prototype,{
	_coreDist: null
	,quote: function(aElem) {
		var retval = { };
		retval["'"] = aElem;
		return retval;
	}
	,unquote: function(aElem) {
		var retval = { };
		retval["''"] = aElem;
		return retval;
	}
	,LoadCoreDist: function() {
		if(this._coreDist == null) {
			this._coreDist = Util.loadcoredist();
		}
		return this._coreDist;
	}
	,EvaluateTransform: function(aDecl,aLibDecls,aSource) {
		var s = new Sutl();
		var llibresult = s.compilelib([aDecl],aLibDecls);
		var llib = { };
		if(Object.prototype.hasOwnProperty.call(llibresult,"lib")) {
			llib = Util3.get(llibresult,"lib");
		}
		var lresult = s.evaluate(aSource,Util3.get(aDecl,"transform-t"),llib,0);
		return lresult;
	}
	,EvaluateTransform2: function(aDecl,aLib,aSource) {
		var s = new Sutl();
		var lresult = s.evaluate(aSource,Util3.get(aDecl,"transform-t"),aLib,0);
		return lresult;
	}
	,testLoadCoreDist: function() {
		var lcoreDist = this.LoadCoreDist();
		this.assertTrue(Util2.isArray(lcoreDist),{ fileName : "Tests_Decls.hx", lineNumber : 93, className : "Tests_Decls", methodName : "testLoadCoreDist"});
	}
	,test_concat: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclarr1 = ["&&",1,"^@.list"];
		var ldecl = { "transform-t" : ldeclarr1};
		var lsource = { "list" : [2,3]};
		var lexpected = [1,2,3];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 121, className : "Tests_Decls", methodName : "test_concat"});
	}
	,test_path1: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : "^@.accum.0"};
		var lsource = { "accum" : [2,3]};
		var lexpected = 2;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 144, className : "Tests_Decls", methodName : "test_path1"});
	}
	,test_reduce1: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclarr1_0 = [1,2];
		var ldeclarr1_1 = ["a","b"];
		var ldecl = { "transform-t" : { "&" : "reduce", "accum" : [], "t" : { ":" : ["&&","^@.item","^@.accum"]}}};
		var lsource = { "list" : [1,2,3,4,5]};
		var lexpected = [5,4,3,2,1];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 176, className : "Tests_Decls", methodName : "test_reduce1"});
	}
	,test_reduce2: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : { "&" : "reduce", "accum" : 0, "t" : { ":" : ["&+","^@.item","^@.accum"]}}};
		var lsource = { "list" : [1,2,3,4,5]};
		var lexpected = 15;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 207, className : "Tests_Decls", methodName : "test_reduce2"});
	}
	,test_foldone: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclarr1_0 = [1,2];
		var ldeclarr1_1 = ["a","b"];
		var ldecl = { "transform-t" : { "&" : "foldone"}, "language" : "sUTL0", "requires" : ["foldone"]};
		var lsource = { "list" : [4,5], "lists" : [[1,1],[2,4]]};
		var lexpected = [[1,1,4],[2,4,5]];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 247, className : "Tests_Decls", methodName : "test_foldone"});
	}
	,test_zip: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclarr1 = [[1,2],["a","b"]];
		var ldecl = { "transform-t" : { "&" : "zip", "list" : ldeclarr1}, "language" : "sUTL0", "requires" : ["zip"]};
		var lexpected = [[1,"a"],[2,"b"]];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 272, className : "Tests_Decls", methodName : "test_zip"});
	}
	,test_1a: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["addmaps_core"], "transform-t" : { "&" : "addmaps_core", "map2" : { "x" : 1}, "map1" : { "y" : 2}}, "language" : "sUTL0"};
		var lexpected = { "x" : 1, "y" : 2};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 306, className : "Tests_Decls", methodName : "test_1a"});
	}
	,test_1: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["addmaps_core","removekeys_core"], "transform-t" : { "!" : "^*.addmaps_core", "map1" : "^$.document", "map2" : { "__meta__" : { "!" : "^*.removekeys_core", "map" : "^$", "keys" : ["document"]}}}, "language" : "sUTL0"};
		var lexpectedArr1 = [1,2,[3,4]];
		var lexpected = { "description" : "stuff", "themeindex" : 6, "eventkeyid" : "3a300a90-eca4-e101-383d-6bfd5990d791", "published" : true, "__meta__" : { "docalt" : lexpectedArr1, "updated" : 1438517599342400, "apkey" : "2a02d608-6431-40aa-b0b2-91bf5f48cd84", "invalid" : false, "stored" : 1438313529667260, "eventkeyid" : "3a300a90-eca4-e101-383d-6bfd5990d791", "key" : "244de280-a01a-c5da-4162-ced9775246a5", "clientkey" : "82b25cfa-f0ec-4f44-9209-77cbd98edd6a", "type" : "CachedObject", "indexnames" : ["82B25CFA-F0EC-4F44-9209-77CBD98EDD6A-Metric"], "objecttype" : "Metric"}, "type" : "Metric_update", "name" : "thingo"};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 373, className : "Tests_Decls", methodName : "test_1"});
	}
	,test_2: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : "^$.indexnames.1", "language" : "sUTL0"};
		var lexpected = null;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 393, className : "Tests_Decls", methodName : "test_2"});
	}
	,test_3: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["removekeys_core"], "transform-t" : { "!" : "^*.removekeys_core", "map" : "^$", "keys" : ["document","updated","apkey","key","clientkey","invalid","indexnames","docalt"]}, "language" : "sUTL0"};
		var lexpected = { "stored" : 1438313529667260, "eventkeyid" : "3a300a90-eca4-e101-383d-6bfd5990d791", "type" : "CachedObject", "objecttype" : "Metric"};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 434, className : "Tests_Decls", methodName : "test_3"});
	}
	,test_4: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["isinlist_core"], "transform-t" : { "!" : "^*.isinlist_core", "list" : { "&" : "keys", "map" : "^$"}, "item" : "document"}, "language" : "sUTL0"};
		var lexpected = true;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 463, className : "Tests_Decls", methodName : "test_4"});
	}
	,test_5: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["quicksort","filter_core"], "transform-t" : { "!" : "^*.filter_core", "list" : { "&" : "quicksort", "list" : { "&" : "keys", "map" : "^$"}}, "filter-t" : true}, "language" : "sUTL0"};
		var lexpected = ["apkey","clientkey","docalt","document","eventkeyid","indexnames","invalid","key","objecttype","stored","type","updated"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 506, className : "Tests_Decls", methodName : "test_5"});
	}
	,test_6: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : { "&" : "reduce", "list" : { "&" : "quicksort", "list" : { "&" : "keys", "map" : "^$"}}, "accum" : "", "t" : this.quote({ "&" : "+", "b" : "^@.item", "a" : "^@.accum"})}, "language" : "sUTL0", "requires" : ["quicksort"]};
		var lexpected = "apkeyclientkeydocaltdocumenteventkeyidindexnamesinvalidkeyobjecttypestoredtypeupdated";
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 539, className : "Tests_Decls", methodName : "test_6"});
	}
	,test_7: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lfilterDeclArr1 = ["&&","^@.accum",{ "&" : "if", "cond" : this.quote(this.unquote("^@.filter-t")), "true" : ["^@.item"], "false" : []}];
		var lfilterDecl = { "name" : "testfilter", "language" : "sUTL0", "transform-t" : { "&" : "reduce", "list" : "^@.list", "accum" : [], "t" : this.quote(lfilterDeclArr1)}};
		ljsonDecls.push([lfilterDecl]);
		var ldecl = { "requires" : ["testfilter"], "transform-t" : { "!" : "^*.testfilter", "list" : { "&" : "keys", "map" : "^$"}, "filter-t" : this.quote({ "&" : "=", "a" : "^@.item", "b" : "stored"})}, "language" : "sUTL0"};
		var lexpected = ["stored"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 597, className : "Tests_Decls", methodName : "test_7"});
	}
	,test_8: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "&" : "if", "cond" : [], "true" : 1, "false" : 0}};
		var lexpected = 0;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 622, className : "Tests_Decls", methodName : "test_8"});
	}
	,test_9: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lreduceDecl = { "name" : "testreduce", "language" : "sUTL0", "transform-t" : { "&" : "if", "cond" : "^@.list", "true" : this.quote({ "!" : "^*.testreduce", "list" : { "&" : "tail", "b" : "^@.list"}, "t" : "^@.t", "accum" : { "!" : "^@.t", "item" : { "&" : "head", "b" : "^@.list"}, "accum" : "^@.accum"}}), "false" : this.quote("^@.accum")}, "requires" : ["testreduce","head_core_emlynoregan_com","tail_core_emlynoregan_com"]};
		ljsonDecls.push([lreduceDecl]);
		var ldecl = { "requires" : ["testreduce","quicksort"], "transform-t" : { "!" : "^*.testreduce", "list" : { "&" : "quicksort", "list" : { "&" : "keys", "map" : "^$"}}, "accum" : "", "t" : this.quote(["&+","^@.accum","^@.item"])}, "language" : "sUTL0"};
		var lexpected = "apkeyclientkeydocaltdocumenteventkeyidindexnamesinvalidkeyobjecttypestoredtypeupdated";
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 687, className : "Tests_Decls", methodName : "test_9"});
	}
	,test_10: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lcondDecl = { "name" : "testcond", "language" : "sUTL0", "transform-t" : { "&" : "if", "cond" : "^@.list", "true" : this.quote(true), "false" : this.quote(false)}, "requires" : []};
		ljsonDecls.push([lcondDecl]);
		var ldecl = { "requires" : ["testcond"], "transform-t" : { "!" : "^*.testcond", "list" : { "&" : "keys", "map" : "^$"}}, "language" : "sUTL0"};
		var lexpected = true;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 729, className : "Tests_Decls", methodName : "test_10"});
	}
	,test_11: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : { "&" : "quicksort", "list" : { "&" : "keys", "map" : "^$"}}, "language" : "sUTL0", "requires" : ["quicksort"]};
		var lexpected = ["apkey","clientkey","docalt","document","eventkeyid","indexnames","invalid","key","objecttype","stored","type","updated"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 766, className : "Tests_Decls", methodName : "test_11"});
	}
	,test_12: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : this.quote({ "a" : "^$.updated", "b" : this.unquote("^$.updated")}), "language" : "sUTL0"};
		var lexpected = { "a" : "^$.updated", "b" : 1438517599342400};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 792, className : "Tests_Decls", methodName : "test_12"});
	}
	,test_13: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["zip_core"], "transform-t" : { "!" : "^*.zip_core", "list" : [[1,2],[3,4]]}, "language" : "sUTL0"};
		var lexpected = [[1,3],[2,4]];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 818, className : "Tests_Decls", methodName : "test_13"});
	}
	,test_14: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "requires" : ["count_core"], "transform-t" : { "&" : "<", "a" : 0, "b" : { "!" : "^*.count_core", "obj" : [[],[]]}}, "language" : "sUTL0"};
		var lexpected = false;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 848, className : "Tests_Decls", methodName : "test_14"});
	}
	,test_15: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : "^$", "language" : "sUTL0"};
		var lexpected = Tests_$Decls.GetSource();
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 868, className : "Tests_Decls", methodName : "test_15"});
	}
	,test_16: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : { "&" : "len", "list" : [1,2]}, "language" : "sUTL0"};
		var lexpected = 2;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 891, className : "Tests_Decls", methodName : "test_16"});
	}
	,test_17: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "!" : "^*.foldone", "lists" : [[1],[2]], "list" : [3,4]}, "requires" : ["foldone"]};
		var lexpected = [[1,3],[2,4]];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 927, className : "Tests_Decls", methodName : "test_17"});
	}
	,test_18: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "!" : "^*.quicksort", "list" : [8,1,5,3,8,9,4,3,6,2,1]}, "requires" : ["quicksort"]};
		var lexpected = [1,1,2,3,3,4,5,6,8,8,9];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,Tests_$Decls.GetSource());
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 965, className : "Tests_Decls", methodName : "test_18"});
	}
	,test_19: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { "x" : [{ "y" : "001"},{ "y" : "002"},{ "y" : "003"}]};
		var ldecl = { "language" : "sUTL0", "transform-t" : "&$.x.**.y"};
		var lexpected = ["001","002","003"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 999, className : "Tests_Decls", methodName : "test_19"});
	}
	,test_20: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : ["&=","thing","thing"]};
		var lexpected = true;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1019, className : "Tests_Decls", methodName : "test_20"});
	}
	,test_21: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : "^@.wontbefound"};
		var lexpected = null;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1039, className : "Tests_Decls", methodName : "test_21"});
	}
	,test_22: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = [{ "id" : "001", "parent" : null},{ "id" : "002", "parent" : null},{ "id" : "003", "parent" : { "id" : "002"}}];
		var ldeclTransform = ["^%",{ "!" : "^*.mapget_core", "key" : "^$.2.parent.id", "map" : { "!" : "^*.idlisttomap", "list" : "^$", "keypath" : ["id"]}},"id"];
		var ldecl = { "language" : "sUTL0", "transform-t" : ldeclTransform, "requires" : ["mapget_core","idlisttomap"]};
		var lexpected = "002";
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1091, className : "Tests_Decls", methodName : "test_22"});
	}
	,test_23: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclTransform = ["^%",{ "x" : 1, "y" : 2},"y"];
		var ldecl = { "language" : "sUTL0", "transform-t" : ldeclTransform, "requires" : ["calcpath","stepneedscomplete","calcstepevents"]};
		var lexpected = 2;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1121, className : "Tests_Decls", methodName : "test_23"});
	}
	,test_24: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclTransform = ["&+",null,3];
		var ldecl = { "language" : "sUTL0", "transform-t" : ldeclTransform};
		var lexpected = 3;
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1143, className : "Tests_Decls", methodName : "test_24"});
	}
	,test_25: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "&" : "split", "value" : "mailto:thingo@example.com", "sep" : ":"}};
		var lexpected = ["mailto","thingo@example.com"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1167, className : "Tests_Decls", methodName : "test_25"});
	}
	,test_26: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "&" : "trim", "value" : "    blabo    "}};
		var lexpected = "blabo";
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1190, className : "Tests_Decls", methodName : "test_26"});
	}
	,test_27: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "a" : { "&" : "pos", "value" : "HelloWorld!!", "sub" : "or"}, "b" : { "&" : "pos", "value" : "HelloWorld!!", "sub" : "x"}}};
		var lexpected = { "a" : 6, "b" : -1};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1225, className : "Tests_Decls", methodName : "test_27"});
	}
	,test_28: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "language" : "sUTL0", "transform-t" : { "&" : "map_core", "list" : "Hello World!!", "t" : { ":" : "^@.item"}}, "requires" : ["map_core"]};
		var lexpected = ["H","e","l","l","o"," ","W","o","r","l","d","!","!"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1251, className : "Tests_Decls", methodName : "test_28"});
	}
	,test_29: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldeclArr = [["a","b"],[1,2]];
		var ldecl = { "transform-t" : { "&" : "zip_core_emlynoregan_com", "list" : ldeclArr}, "requires" : ["zip_core_emlynoregan_com"]};
		var lexpectedArr1 = ["a",1];
		var lexpectedArr2 = ["b",2];
		var lexpected = [lexpectedArr1,lexpectedArr2];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1285, className : "Tests_Decls", methodName : "test_29"});
	}
	,test_30: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : "two"}};
		var ldeclArr = [{ "&" : "keys", "map" : "^@.map1"},{ "&" : "values", "map" : "^@.map1"}];
		var ldecl = { "transform-t" : { "!" : { ":" : { "!" : "^*.zip_core_emlynoregan_com", "list" : ldeclArr}}, "map1" : { "x" : 1, "y" : "two"}}, "requires" : ["zip_core_emlynoregan_com"]};
		var lexpectedArr1 = ["x",1];
		var lexpectedArr2 = ["y","two"];
		var lexpected = [lexpectedArr1,lexpectedArr2];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1337, className : "Tests_Decls", methodName : "test_30"});
	}
	,test_30b: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : 2}, "keys" : ["x","y"], "values" : [1,2]};
		var ldeclArr = ["^@.keys",{ "&" : "values", "map" : "^@.map1"}];
		var ldecl = { "transform-t" : { "!" : { ":" : ldeclArr}, "map1" : { "x" : 1, "y" : 2}, "keys" : ["x","y"], "values" : [1,2]}};
		var lexpectedArr1 = ["x","y"];
		var lexpectedArr2 = [1,2];
		var lexpected = [lexpectedArr1,lexpectedArr2];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1386, className : "Tests_Decls", methodName : "test_30b"});
	}
	,test_31: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : "two"}, map2 : { z : 3}};
		var ldeclArr1 = ["&&",{ "&" : "keys", "map" : "^@.map1"},{ "&" : "keys", "map" : "^@.map2"}];
		var ldeclArr2 = ["&&",{ "&" : "values", "map" : "^@.map1"},{ "&" : "values", "map" : "^@.map2"}];
		var ldecl = { "transform-t" : { "&" : "zip", "list" : [ldeclArr1,ldeclArr2]}, "requires" : ["zip"]};
		var lexpectedArr1 = ["x",1];
		var lexpectedArr2 = ["y","two"];
		var lexpectedArr3 = ["z",3];
		var lexpected = [lexpectedArr1,lexpectedArr2,lexpectedArr3];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1449, className : "Tests_Decls", methodName : "test_31"});
	}
	,test_32: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsourceArr1 = ["x",1];
		var lsourceArr2 = ["y","two"];
		var lsourceArr3 = ["z",3];
		var lsource = { "x" : [lsourceArr1,lsourceArr2,lsourceArr3], "value" : { "z" : 5}};
		var ldeclArr = ["^%",{ "z" : "^@.x"},"z"];
		var ldecl = { "transform-t" : { "!" : { ":" : { "&" : "makemap"}}, "value" : ldeclArr}};
		var lexpected = { "x" : 1, "y" : "two", "z" : 3};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1484, className : "Tests_Decls", methodName : "test_32"});
	}
	,test_33: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : "two"}, map2 : { z : 3}};
		var ldeclArr1 = ["&&",{ "&" : "keys", "map" : "^@.map1"},{ "&" : "keys", "map" : "^@.map2"}];
		var ldeclArr2 = ["&&",{ "&" : "values", "map" : "^@.map1"},{ "&" : "values", "map" : "^@.map2"}];
		var ldecl = { "transform-t" : { "!" : { ":" : { "&" : "makemap", "value" : { "!" : "^*.zip_core_emlynoregan_com", "list" : [ldeclArr1,ldeclArr2]}}}, "map1" : { x : 1, y : "two"}, "map2" : { z : 3}}, "requires" : ["zip_core_emlynoregan_com"]};
		var lexpected = { "x" : 1, "y" : "two", "z" : 3};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1560, className : "Tests_Decls", methodName : "test_33"});
	}
	,test_34: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var ldecl = { "transform-t" : { "!" : { ":" : { "!" : { ":" : { "z" : ["^@.x","^@.y"]}}, "x" : { "z" : 5}}}, "x" : { "z" : 3}, "y" : { "z" : 4}}};
		var lexpected = { "z" : [{ "z" : 5},{ "z" : 4}]};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1588, className : "Tests_Decls", methodName : "test_34"});
	}
	,test_35: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : "two"}, map2 : { z : 3}};
		var ldecl = { "transform-t" : { "&" : "addmaps_core"}, "requires" : ["addmaps_core"]};
		var lexpected = { "x" : 1, "y" : "two", "z" : 3};
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1625, className : "Tests_Decls", methodName : "test_35"});
	}
	,test_36: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource = { map1 : { x : 1, y : 2}};
		var ldecl = { "transform-t" : { "!" : { ":" : { "&" : "keys", "map" : "^@.map1"}}, "map1" : { "x" : 1, "y" : 2}}};
		var lexpected = ["x","y"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,lsource);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1661, className : "Tests_Decls", methodName : "test_36"});
	}
	,test_37: function() {
		var ljsonDecls = [this.LoadCoreDist()];
		var lsource_map1 = { x : 1, y : 2};
		var ldecl = { "transform-t" : { "&" : "keys", "map" : { "xxx" : 1, "yyy" : 2}}};
		var lexpected = ["xxx","yyy"];
		var lresult = this.EvaluateTransform(ldecl,ljsonDecls,null);
		this.assertTrue(Util.deepEqual(lexpected,lresult),{ fileName : "Tests_Decls.hx", lineNumber : 1694, className : "Tests_Decls", methodName : "test_37"});
	}
	,__class__: Tests_$Decls
});
var Tests_$Evaluate = function() {
	haxe_unit_TestCase.call(this);
};
Tests_$Evaluate.__name__ = ["Tests_Evaluate"];
Tests_$Evaluate.__super__ = haxe_unit_TestCase;
Tests_$Evaluate.prototype = $extend(haxe_unit_TestCase.prototype,{
	checkEvaluate: function(src,tt,expected) {
		var s = new Sutl();
		var result = s.evaluate(src,tt,null);
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 12, className : "Tests_Evaluate", methodName : "checkEvaluate"});
	}
	,testEvalSimple: function() {
		this.checkEvaluate(null,5,5);
	}
	,testEvalArray: function() {
		this.checkEvaluate(null,[1,2],[1,2]);
	}
	,testEvalDict: function() {
		this.checkEvaluate(null,{ "x" : 1, "y" : 2},{ "x" : 1, "y" : 2});
	}
	,testFlatten: function() {
		var tt = ["&&",1,2,[3,4],5];
		this.checkEvaluate(null,tt,[1,2,3,4,5]);
	}
	,testEval_1: function() {
		var tt = { "!" : { ":" : { "x" : "^@.y"}}, "y" : 4};
		this.checkEvaluate(null,tt,{ "x" : 4});
	}
	,testEval2_1: function() {
		var tt = { "!!" : { ":" : { "x" : "^@"}}, "s" : 4};
		this.checkEvaluate(null,tt,{ "x" : 4});
	}
	,testEvaluateBuiltinSimple1: function() {
		var tt = { "&" : "head", "b" : [1,2,3]};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltinSimple(true,null,tt,null,null,tt,b,0);
		var expected = 1;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 76, className : "Tests_Evaluate", methodName : "testEvaluateBuiltinSimple1"});
	}
	,testEvaluateBuiltinSimple2: function() {
		var tt = { "&" : "tail", "b" : [1,2,3]};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltinSimple(true,null,tt,null,null,tt,b,0);
		var expected = [2,3];
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 94, className : "Tests_Evaluate", methodName : "testEvaluateBuiltinSimple2"});
	}
	,testEvaluateBuiltinSimple3: function() {
		var tt = { "&" : "xxx"};
		var l = { "xxx" : 7};
		var src = { "thing" : 12};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltinSimple(true,src,tt,l,src,tt,b,0);
		var expected = 7;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 122, className : "Tests_Evaluate", methodName : "testEvaluateBuiltinSimple3"});
	}
	,testEvaluateBuiltin1: function() {
		var tt = { "&" : "x", "args" : [2,3,4]};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltin(null,tt,null,null,tt,b,0);
		var expected = 24;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 142, className : "Tests_Evaluate", methodName : "testEvaluateBuiltin1"});
	}
	,testEvaluateBuiltin2: function() {
		var tt = { "&" : "x", "args" : [2]};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltin(null,tt,null,null,tt,b,0);
		var expected = 2;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 162, className : "Tests_Evaluate", methodName : "testEvaluateBuiltin2"});
	}
	,testEvaluateBuiltin3: function() {
		var tt = { "&" : "@", "head" : true, "args" : ["*","y"]};
		var src = { "x" : { "y" : 3}};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateBuiltin(src,tt,null,src,tt,b,0);
		var expected = 3;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 189, className : "Tests_Evaluate", methodName : "testEvaluateBuiltin3"});
	}
	,testEvaluateArrayBuiltin1: function() {
		var tt = ["^@","*","y"];
		var src = { "x" : { "y" : 3}};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateArrayBuiltin(src,tt,null,src,tt,b,0);
		var expected = 3;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 216, className : "Tests_Evaluate", methodName : "testEvaluateArrayBuiltin1"});
	}
	,testEvaluateStringBuiltin1: function() {
		var tt = "^@.*.y";
		var src = { "x" : { "y" : 3}};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateStringBuiltin(src,tt,null,src,tt,b,0);
		var expected = 3;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 239, className : "Tests_Evaluate", methodName : "testEvaluateStringBuiltin1"});
	}
	,testEvaluateStringBuiltin2: function() {
		var tt = "^@.x.2";
		var src = { "x" : [1,2,3]};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluateStringBuiltin(src,tt,null,src,tt,b,0);
		var expected = 3;
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 260, className : "Tests_Evaluate", methodName : "testEvaluateStringBuiltin2"});
	}
	,testEvaluate1: function() {
		var tt = { "name" : "^@.x.y"};
		var src = { "x" : { "y" : "fred"}};
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluate(src,tt,null,src,tt,b,0);
		var expected = { "name" : "fred"};
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 285, className : "Tests_Evaluate", methodName : "testEvaluate1"});
	}
	,testEvaluate2: function() {
		var tt = "^@.2";
		var src = "Hello World";
		var s = new Sutl();
		var b = s.builtins();
		var result = s._evaluate(src,tt,null,src,tt,b,0);
		var expected = "l";
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Evaluate.hx", lineNumber : 303, className : "Tests_Evaluate", methodName : "testEvaluate2"});
	}
	,__class__: Tests_$Evaluate
});
var Tests_$Paths = function() {
	haxe_unit_TestCase.call(this);
};
Tests_$Paths.__name__ = ["Tests_Paths"];
Tests_$Paths.__super__ = haxe_unit_TestCase;
Tests_$Paths.prototype = $extend(haxe_unit_TestCase.prototype,{
	test_deepEqual1: function() {
		var s = new Sutl();
		var arr = [12,{ "z" : 3, "k" : null},"x"];
		var obj1 = { "x" : arr, "y" : { "xx" : 14}};
		this.assertTrue(Util.deepEqual(obj1,obj1),{ fileName : "Tests_Paths.hx", lineNumber : 21, className : "Tests_Paths", methodName : "test_deepEqual1"});
	}
	,test_deepEqual2: function() {
		var s = new Sutl();
		var arr = [12,{ "z" : 3, "k" : [1,2,3]},"x"];
		var obj1 = { "x" : arr, "y" : { "xx" : 14}};
		var obj2 = Util.deepCopy(obj1);
		Reflect.field(obj2,"x")[1]["k"] = [1,2,4];
		var isequal = false;
		try {
			isequal = Util.deepEqual(obj1,obj2);
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
		}
		this.assertFalse(isequal,{ fileName : "Tests_Paths.hx", lineNumber : 57, className : "Tests_Paths", methodName : "test_deepEqual2"});
	}
	,testPath1: function() {
		var s = new Sutl();
		var result = s._doPath(["xx"],"y");
		this.assertTrue(Util.deepEqual([],result),{ fileName : "Tests_Paths.hx", lineNumber : 69, className : "Tests_Paths", methodName : "testPath1"});
	}
	,testPath2: function() {
		var s = new Sutl();
		var result = s._doPath([{ "x" : 1},{ "x" : 2.3}],"x");
		this.assertTrue(Util.deepEqual([1,2.3],result),{ fileName : "Tests_Paths.hx", lineNumber : 83, className : "Tests_Paths", methodName : "testPath2"});
	}
	,testPath3: function() {
		var s = new Sutl();
		var dynarr = [1,2,{ "x" : 4}];
		var result = s._doPath([{ "x" : [1,2,3]},{ "x" : { "y" : { "yy" : dynarr}, "z" : { "z" : { "z" : "zz"}}}}],"**");
		var expected = [{ x : [1,2,3]},[1,2,3],1,2,3,{ x : { y : { yy : dynarr}, z : { z : { z : "zz"}}}},{ y : { yy : dynarr}, z : { z : { z : "zz"}}},{ yy : dynarr},{ z : { z : "zz"}},{ z : "zz"},"zz",dynarr,dynarr[0],dynarr[1],dynarr[2],4];
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Paths.hx", lineNumber : 124, className : "Tests_Paths", methodName : "testPath3"});
	}
	,testPath4: function() {
		var s = new Sutl();
		var dynarr = [1,2,{ "x" : 4}];
		var result = s._doPath([{ "x" : [1,2,3]},{ "x" : { "y" : { "yy" : dynarr}, "z" : { "z" : { "z" : "zz"}}}}],"*");
		var expected = [[1,2,3],{ y : { yy : dynarr}, z : { z : { z : "zz"}}}];
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Paths.hx", lineNumber : 151, className : "Tests_Paths", methodName : "testPath4"});
	}
	,testProcessPath: function() {
		var s = new Sutl();
		var startfrom = { "x" : { "y" : { "z" : 3}}};
		var scope = { "a" : "x", "b" : "y"};
		var result = s._processPath(startfrom,null,scope,null,null,null,null,null);
		var expected = [{ "z" : 3}];
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Paths.hx", lineNumber : 175, className : "Tests_Paths", methodName : "testProcessPath"});
	}
	,testProcessPath2: function() {
		var s = new Sutl();
		var startfrom = { "x" : { "y" : { "z" : 3}}};
		var scope = { "a" : [{ "z" : 3}], "b" : "z", "notfirst" : true};
		var result = s._processPath(startfrom,null,scope,null,null,null,null,null);
		var expected = [3];
		this.assertTrue(Util.deepEqual(expected,result),{ fileName : "Tests_Paths.hx", lineNumber : 201, className : "Tests_Paths", methodName : "testProcessPath2"});
	}
	,__class__: Tests_$Paths
});
var Tests_$isType = function() {
	haxe_unit_TestCase.call(this);
};
Tests_$isType.__name__ = ["Tests_isType"];
Tests_$isType.__super__ = haxe_unit_TestCase;
Tests_$isType.prototype = $extend(haxe_unit_TestCase.prototype,{
	quote: function(aElem) {
		var retval = { };
		retval["'"] = aElem;
		return retval;
	}
	,unquote: function(aElem) {
		var retval = { };
		retval["''"] = aElem;
		return retval;
	}
	,isType: function(aTypeName,aObj) {
		this.assertTrue(Util2.isObject(aObj) == (aTypeName == "object"),{ fileName : "Tests_isType.hx", lineNumber : 19, className : "Tests_isType", methodName : "isType"});
		this.assertTrue(Util2.isArray(aObj) == (aTypeName == "array"),{ fileName : "Tests_isType.hx", lineNumber : 20, className : "Tests_isType", methodName : "isType"});
		this.assertTrue(Util2.isString(aObj) == (aTypeName == "string"),{ fileName : "Tests_isType.hx", lineNumber : 21, className : "Tests_isType", methodName : "isType"});
		this.assertTrue(Util2.isNumber(aObj) == (aTypeName == "number"),{ fileName : "Tests_isType.hx", lineNumber : 22, className : "Tests_isType", methodName : "isType"});
		this.assertTrue(Util2.isBool(aObj) == (aTypeName == "bool"),{ fileName : "Tests_isType.hx", lineNumber : 23, className : "Tests_isType", methodName : "isType"});
	}
	,GetType: function(aSutlTypeName,aObj) {
		var s = new Sutl();
		this.assertTrue(Util.gettype(aObj) == aSutlTypeName,{ fileName : "Tests_isType.hx", lineNumber : 30, className : "Tests_isType", methodName : "GetType"});
	}
	,getValue: function(aTypeName) {
		var _dynamicArray = [1,2,"xxx"];
		var _values = { "object" : { "x" : 1, "y" : 2}, "array" : _dynamicArray, "string" : "xxxx", "number" : 2, "number2" : 2.5, "bool" : true, "null" : null};
		var s = new Sutl();
		return Util3.get(_values,aTypeName);
	}
	,testIsObject: function() {
		this.isType("object",this.getValue("object"));
	}
	,testIsArray: function() {
		this.isType("array",this.getValue("array"));
	}
	,testIsString: function() {
		this.isType("string",this.getValue("string"));
	}
	,testIsNumber: function() {
		this.isType("number",this.getValue("number"));
	}
	,testIsNumber2: function() {
		this.isType("number",this.getValue("number2"));
	}
	,testIsBool: function() {
		this.isType("bool",this.getValue("bool"));
	}
	,testGetTypeObject: function() {
		this.GetType("map",this.getValue("object"));
	}
	,testGetTypeArray: function() {
		this.GetType("list",this.getValue("array"));
	}
	,testGetTypeString: function() {
		this.GetType("string",this.getValue("string"));
	}
	,testGetTypeNumber: function() {
		this.GetType("number",this.getValue("number"));
	}
	,testGetTypeNumber2: function() {
		this.GetType("number",this.getValue("number2"));
	}
	,testGetTypeBool: function() {
		this.GetType("boolean",this.getValue("bool"));
	}
	,testGetTypeNull: function() {
		this.GetType("null",this.getValue("null"));
	}
	,testIsTruthyObj: function() {
		this.assertTrue(Util3.isTruthy({ "fred" : 1}),{ fileName : "Tests_isType.hx", lineNumber : 125, className : "Tests_isType", methodName : "testIsTruthyObj"});
	}
	,testIsNotTruthyObj: function() {
		this.assertFalse(Util3.isTruthy({ }),{ fileName : "Tests_isType.hx", lineNumber : 130, className : "Tests_isType", methodName : "testIsNotTruthyObj"});
	}
	,testIsTruthyList: function() {
		this.assertTrue(Util3.isTruthy([{ "fred" : 1},1]),{ fileName : "Tests_isType.hx", lineNumber : 135, className : "Tests_isType", methodName : "testIsTruthyList"});
	}
	,testIsNotTruthyList: function() {
		this.assertFalse(Util3.isTruthy([]),{ fileName : "Tests_isType.hx", lineNumber : 140, className : "Tests_isType", methodName : "testIsNotTruthyList"});
	}
	,testIsTruthyString: function() {
		this.assertTrue(Util3.isTruthy("fred"),{ fileName : "Tests_isType.hx", lineNumber : 145, className : "Tests_isType", methodName : "testIsTruthyString"});
	}
	,testIsNotTruthyString: function() {
		this.assertFalse(Util3.isTruthy(""),{ fileName : "Tests_isType.hx", lineNumber : 150, className : "Tests_isType", methodName : "testIsNotTruthyString"});
	}
	,testIsTruthyNumber: function() {
		this.assertTrue(Util3.isTruthy(4.7),{ fileName : "Tests_isType.hx", lineNumber : 155, className : "Tests_isType", methodName : "testIsTruthyNumber"});
	}
	,testIsNotTruthyNumber: function() {
		this.assertFalse(Util3.isTruthy(0),{ fileName : "Tests_isType.hx", lineNumber : 160, className : "Tests_isType", methodName : "testIsNotTruthyNumber"});
	}
	,testIsTruthyBool: function() {
		this.assertTrue(Util3.isTruthy(true),{ fileName : "Tests_isType.hx", lineNumber : 165, className : "Tests_isType", methodName : "testIsTruthyBool"});
	}
	,testIsNotTruthyBool: function() {
		this.assertFalse(Util3.isTruthy(false),{ fileName : "Tests_isType.hx", lineNumber : 170, className : "Tests_isType", methodName : "testIsNotTruthyBool"});
	}
	,testIsNotTruthyNull: function() {
		this.assertFalse(Util3.isTruthy(null),{ fileName : "Tests_isType.hx", lineNumber : 175, className : "Tests_isType", methodName : "testIsNotTruthyNull"});
	}
	,testIsBuiltinEval: function() {
		var obj = { "&" : "thing", "x" : 2};
		this.assertTrue(Util3.isBuiltinEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 185, className : "Tests_isType", methodName : "testIsBuiltinEval"});
	}
	,testIsBuiltinEval2: function() {
		var obj = { "x&" : "thing", "x" : 2};
		this.assertFalse(Util3.isBuiltinEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 195, className : "Tests_isType", methodName : "testIsBuiltinEval2"});
	}
	,testIsArrayBuiltinEval: function() {
		var s = new Sutl();
		var b = s.builtins();
		var obj = ["&+",1,2];
		this.assertTrue(Util.isArrayBuiltinEval(obj,b),{ fileName : "Tests_isType.hx", lineNumber : 210, className : "Tests_isType", methodName : "testIsArrayBuiltinEval"});
	}
	,testIsArrayBuiltinEval2: function() {
		var s = new Sutl();
		var b = s.builtins();
		var obj = ["&foo",1,2];
		this.assertFalse(Util.isArrayBuiltinEval(obj,b),{ fileName : "Tests_isType.hx", lineNumber : 225, className : "Tests_isType", methodName : "testIsArrayBuiltinEval2"});
	}
	,testIsStringBuiltinEval: function() {
		var s = new Sutl();
		var b = s.builtins();
		var obj = "^@.x.y.z";
		this.assertTrue(Util.isStringBuiltinEval(obj,b),{ fileName : "Tests_isType.hx", lineNumber : 236, className : "Tests_isType", methodName : "testIsStringBuiltinEval"});
	}
	,testIsStringBuiltinEval2: function() {
		var s = new Sutl();
		var b = s.builtins();
		var obj = "@.x.y.z";
		this.assertFalse(Util.isStringBuiltinEval(obj,b),{ fileName : "Tests_isType.hx", lineNumber : 247, className : "Tests_isType", methodName : "testIsStringBuiltinEval2"});
	}
	,testIsStringBuiltinEval3: function() {
		var s = new Sutl();
		var b = s.builtins();
		var obj = "&zzz.x.y.z";
		this.assertFalse(Util.isStringBuiltinEval(obj,b),{ fileName : "Tests_isType.hx", lineNumber : 258, className : "Tests_isType", methodName : "testIsStringBuiltinEval3"});
	}
	,testIsEval: function() {
		var obj = { "!" : { "x" : 1}, "z" : 2};
		this.assertTrue(Util3.isEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 268, className : "Tests_isType", methodName : "testIsEval"});
	}
	,testIsEval2: function() {
		var obj = { "!!" : { "x" : 1}, "s" : 2};
		this.assertTrue(Util3.isEval2(obj),{ fileName : "Tests_isType.hx", lineNumber : 278, className : "Tests_isType", methodName : "testIsEval2"});
	}
	,testIsQuoteEval: function() {
		var obj = this.quote({ "x" : 1});
		this.assertTrue(Util3.isQuoteEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 285, className : "Tests_isType", methodName : "testIsQuoteEval"});
	}
	,testIsDoubleQuoteEval: function() {
		var obj = this.unquote({ "x" : 1});
		this.assertTrue(Util3.isDoubleQuoteEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 292, className : "Tests_isType", methodName : "testIsDoubleQuoteEval"});
	}
	,testIsColonEval: function() {
		var obj = { ":" : { "x" : 1}, "s" : 2};
		this.assertTrue(Util3.isColonEval(obj),{ fileName : "Tests_isType.hx", lineNumber : 302, className : "Tests_isType", methodName : "testIsColonEval"});
	}
	,testIsListTransform: function() {
		var obj = [1,2,3];
		this.assertTrue(Util3.isListTransform(obj),{ fileName : "Tests_isType.hx", lineNumber : 309, className : "Tests_isType", methodName : "testIsListTransform"});
	}
	,testIsDictTransform: function() {
		var obj = { };
		this.assertTrue(Util3.isDictTransform(obj),{ fileName : "Tests_isType.hx", lineNumber : 316, className : "Tests_isType", methodName : "testIsDictTransform"});
	}
	,testShallowCopy: function() {
		var lsource = Reflect.fields({ a : 1, b : 2});
		var lcopy = Util.shallowCopy(lsource);
		this.assertTrue(Util.deepEqual(lsource,lcopy),{ fileName : "Tests_isType.hx", lineNumber : 325, className : "Tests_isType", methodName : "testShallowCopy"});
	}
	,testAddObject: function() {
		var lsource = { a : 1, b : 2};
		Util.addObject(lsource,{ c : 3});
		this.assertTrue(Util.deepEqual(lsource,{ a : 1, b : 2, c : 3}),{ fileName : "Tests_isType.hx", lineNumber : 334, className : "Tests_isType", methodName : "testAddObject"});
	}
	,__class__: Tests_$isType
});
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Util = function() { };
Util.__name__ = ["Util"];
Util.isStringBuiltinEval = function(obj,b) {
	var retval = Util2.isString(obj);
	if(retval) {
		var str = js_Boot.__cast(obj , String);
		var larr = str.split(".");
		retval = Util.isArrayBuiltinEval(larr,b);
	}
	return retval;
};
Util.isArrayBuiltinEval = function(obj,b) {
	var retval = Util2.isArray(obj);
	if(retval) {
		var arr = Util.SequenceToArray(obj);
		retval = arr.length > 0;
		if(retval) {
			var lopArr = arr.slice(0,1);
			var lop = null;
			if(lopArr.length > 0) {
				lop = lopArr[0];
			} else {
				lop = null;
			}
			retval = Util2.isString(lop);
			if(retval) {
				var lopStr = js_Boot.__cast(lop , String);
				var lopSignifier = lopStr.charAt(0);
				var lopSignifier1 = lopStr.charAt(0);
				var lopBuiltinName = Util.getArrayBuiltinName(lopStr);
				if(lopSignifier1 == "&" || lopSignifier1 == "^") {
					retval = UtilReflect.hasField(b,lopBuiltinName);
				} else {
					retval = false;
				}
			}
		}
	}
	return retval;
};
Util.getArrayBuiltinName = function(aOp) {
	if(aOp.length != null && aOp.length > 0) {
		return HxOverrides.substr(aOp,1,aOp.length - 1);
	} else {
		return null;
	}
};
Util.gettype = function(item) {
	if(Util2.isObject(item)) {
		return "map";
	} else if(Util2.isArray(item)) {
		return "list";
	} else if(Util2.isString(item)) {
		return "string";
	} else if(Util2.isNumber(item)) {
		return "number";
	} else if(Util2.isBool(item)) {
		return "boolean";
	} else if(item == null) {
		return "null";
	} else {
		return "unknown";
	}
};
Util.MakeExcept = function(aMessage,aPath) {
	var retval = aPath.join(".");
	if(retval != "") {
		retval = retval + ": " + aMessage;
	} else {
		retval = aMessage;
	}
	return retval;
};
Util.deepEqual = function(aObj1,aObj2,maxdepth) {
	if(maxdepth == null) {
		maxdepth = 100;
	}
	return Util.deepEqual2(aObj1,aObj2,[],maxdepth);
};
Util.deepEqual2 = function(aObj1,aObj2,path,maxdepth) {
	if(maxdepth == null) {
		maxdepth = 100;
	}
	var s = new Sutl();
	var retval = false;
	if(maxdepth > 0) {
		var obj1Type = Util.gettype(aObj1);
		var obj2Type = Util.gettype(aObj2);
		retval = obj1Type == obj2Type;
		if(!retval) {
			throw new js__$Boot_HaxeError(Util.MakeExcept("Different types: type(" + Std.string(aObj1) + ")=" + obj1Type + ", type(" + Std.string(aObj2) + ")=" + obj2Type,path));
		}
		if(retval) {
			if(obj1Type == "map") {
				var obj1Fields = UtilReflect.fields(aObj1);
				var obj2Fields = UtilReflect.fields(aObj2);
				retval = obj1Fields.length == obj2Fields.length;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Keys don't match: fields(" + Std.string(aObj1) + ")=" + Std.string(obj1Fields) + ", fields(" + Std.string(aObj2) + ")=" + Std.string(obj2Fields),path));
				}
				if(retval) {
					var _g = 0;
					while(_g < obj1Fields.length) {
						var obj1Field = obj1Fields[_g];
						++_g;
						path.push(obj1Field);
						if(UtilReflect.hasField(aObj2,obj1Field)) {
							retval = Util.deepEqual2(UtilReflect.field(aObj1,obj1Field),UtilReflect.field(aObj2,obj1Field),path,maxdepth - 1);
						} else {
							retval = false;
						}
						path.pop();
						if(!retval) {
							break;
						}
					}
				}
			} else if(obj1Type == "list") {
				retval = aObj1.length == aObj2.length;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Array lengths don't match: length(" + Std.string(aObj1) + ")=" + Std.string(aObj1.length) + ", length(" + Std.string(aObj2) + ")=" + Std.string(aObj2.length),path));
				}
				if(retval) {
					var len = js_Boot.__cast(aObj1.length , Int);
					var _g1 = 0;
					var _g2 = len;
					while(_g1 < _g2) {
						var ix = _g1++;
						path.push(ix);
						retval = Util.deepEqual2(aObj1[ix],aObj2[ix],path,maxdepth - 1);
						path.pop();
						if(!retval) {
							break;
						}
					}
				}
			} else {
				retval = aObj1 == aObj2;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Values don't match (" + Std.string(aObj1) + ", " + Std.string(aObj2) + ")",path));
				}
			}
		}
	}
	return retval;
};
Util.deepCopy = function(aObj) {
	var retval = null;
	var s = new Sutl();
	var objType = Util.gettype(aObj);
	if(objType == "map") {
		retval = { };
		var objFields = UtilReflect.fields(aObj);
		var _g = 0;
		while(_g < objFields.length) {
			var objField = objFields[_g];
			++_g;
			UtilReflect.setField(retval,objField,Util.deepCopy(UtilReflect.field(aObj,objField)));
		}
	} else if(objType == "list") {
		var retvalArr = [];
		var _g1 = 0;
		var _g11 = js_Boot.__cast(aObj , Array);
		while(_g1 < _g11.length) {
			var elem = _g11[_g1];
			++_g1;
			retvalArr.push(Util.deepCopy(elem));
		}
		retval = retvalArr;
	} else {
		retval = aObj;
	}
	return retval;
};
Util.addObject = function(aBase,aAdd) {
	if(Util2.isObject(aBase) && Util2.isObject(aAdd)) {
		var _g = 0;
		var _g1 = UtilReflect.fields(aAdd);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			UtilReflect.setField(aBase,key,UtilReflect.field(aAdd,key));
		}
	}
};
Util.StringToArray = function(aStrObj) {
	var retval = null;
	if(Util2.isString(aStrObj)) {
		retval = [];
		var liststr = js_Boot.__cast(aStrObj , String);
		var _g1 = 0;
		var _g = liststr.length;
		while(_g1 < _g) {
			var ix = _g1++;
			retval.push(liststr.charAt(ix));
		}
	}
	return retval;
};
Util.SequenceToArray = function(aObj) {
	var retval = null;
	if(Util2.isArray(aObj)) {
		retval = js_Boot.__cast(aObj , Array);
	} else if(Util2.isString(aObj)) {
		retval = Util.StringToArray(aObj);
	}
	return retval;
};
Util.flatten = function(lst) {
	var retval = [];
	var _g = 0;
	while(_g < lst.length) {
		var elem = lst[_g];
		++_g;
		if(Util2.isArray(elem)) {
			retval = retval.concat(elem);
		} else {
			retval.push(elem);
		}
	}
	return retval;
};
Util.loadcoredist = function() {
	return Sutlcore.get();
};
Util.shallowCopy = function(aObj) {
	var retval = null;
	var objType = Util.gettype(aObj);
	if(objType == "map") {
		retval = Reflect.copy(aObj);
	} else if(objType == "list") {
		retval = [];
		var _g = 0;
		var _g1 = js_Boot.__cast(aObj , Array);
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			retval.push(elem);
		}
	} else {
		retval = aObj;
	}
	return retval;
};
var Util2 = function() { };
Util2.__name__ = ["Util2"];
Util2.isObject = function(obj) {
	var retval = Type["typeof"](obj) == ValueType.TObject;
	return retval;
};
Util2.isArray = function(obj) {
	var retval = (obj instanceof Array) && obj.__enum__ == null;
	return retval;
};
Util2.isString = function(obj) {
	var o = obj;
	var retval = (o == null ? null : js_Boot.getClass(o)) == String;
	return retval;
};
Util2.isSequence = function(obj) {
	if(!Util2.isArray(obj)) {
		return Util2.isString(obj);
	} else {
		return true;
	}
};
Util2.isInt = function(obj) {
	var ltype = Type["typeof"](obj);
	return ltype == ValueType.TInt;
};
Util2.isNumber = function(obj) {
	var ltype = Type["typeof"](obj);
	if(ltype != ValueType.TInt) {
		return ltype == ValueType.TFloat;
	} else {
		return true;
	}
};
Util2.isBool = function(obj) {
	var ltype = Type["typeof"](obj);
	return ltype == ValueType.TBool;
};
var Util3 = function() { };
Util3.__name__ = ["Util3"];
Util3.isBuiltinEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"&");
	} else {
		return false;
	}
};
Util3.isEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"!");
	} else {
		return false;
	}
};
Util3.isEval2 = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"!!");
	} else {
		return false;
	}
};
Util3.isQuoteEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"'");
	} else {
		return false;
	}
};
Util3.isDoubleQuoteEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"''");
	} else {
		return false;
	}
};
Util3.isColonEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,":");
	} else {
		return false;
	}
};
Util3.isDictTransform = function(obj) {
	return Util2.isObject(obj);
};
Util3.isListTransform = function(obj) {
	return Util2.isArray(obj);
};
Util3.isTruthy = function(aObj) {
	var retval = false;
	if(Util2.isArray(aObj)) {
		retval = aObj.length > 0;
	} else if(Util2.isString(aObj)) {
		retval = aObj != "";
	} else if(Util2.isNumber(aObj)) {
		retval = aObj != 0;
	} else if(Util2.isBool(aObj)) {
		retval = aObj;
	} else if(Util2.isObject(aObj)) {
		retval = UtilReflect.fields(aObj).length > 0;
	} else {
		retval = aObj != null;
	}
	return retval;
};
Util3.isPrefix = function(str1,str2) {
	return str2.indexOf(str1) == 0;
};
Util3.get = function(obj,key,def) {
	var retval = null;
	if(Util2.isObject(obj)) {
		retval = UtilReflect.field(obj,key);
	}
	if(retval == null) {
		retval = def;
	}
	return retval;
};
var UtilReflect = function() { };
UtilReflect.__name__ = ["UtilReflect"];
UtilReflect.fields = function(obj) {
	return Reflect.fields(obj);
};
UtilReflect.hasField = function(obj,fieldname) {
	return Object.prototype.hasOwnProperty.call(obj,fieldname);
};
UtilReflect.field = function(obj,fieldname) {
	return Reflect.field(obj,fieldname);
};
UtilReflect.setField = function(obj,fieldname,value) {
	obj[fieldname] = value;
	return;
};
UtilReflect.deleteField = function(obj,fieldname) {
	return Reflect.deleteField(obj,fieldname);
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,__class__: haxe_ds_StringMap
};
var haxe_unit_TestResult = function() {
	this.m_tests = new List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = ["haxe","unit","TestResult"];
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new List();
};
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = t == null ? null : js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = fname;
				t.setup();
				try {
					var args = [];
					field.apply(t,args);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( $e0 ) {
					haxe_CallStack.lastException = $e0;
					if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
					if( js_Boot.__instanceof($e0,haxe_unit_TestStatus) ) {
						var e = $e0;
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
					var e1 = $e0;
					haxe_unit_TestRunner.print("E");
					if(e1.message != null) {
						t.currentTest.error = "exception thrown : " + Std.string(e1) + " [" + Std.string(e1.message) + "]";
					} else {
						t.currentTest.error = "exception thrown : " + Std.string(e1);
					}
					var tmp1 = haxe_CallStack.exceptionStack();
					t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
