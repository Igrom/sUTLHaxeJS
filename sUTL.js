// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Sutl = $hx_exports["Sutl"] = function() {
};
Sutl.__name__ = true;
Sutl.version = function() {
	return "0.1";
};
Sutl.prototype = {
	ExampleString: function() {
		return "example string";
	}
	,ExampleInt: function() {
		return 1;
	}
	,ExampleFloat: function() {
		return 1.0;
	}
	,ExampleBool: function() {
		return true;
	}
	,ExampleNull: function() {
		return null;
	}
	,ExampleArray: function() {
		return [1,2];
	}
	,ExampleDict: function() {
		return { "x" : 1};
	}
	,_processPath: function(startfrom,parentscope,scope,l,src,tt,b,h) {
		var la = Util3.get(scope,"a");
		var lb = Util3.get(scope,"b");
		var lnotfirst = Util3.get(scope,"notfirst",false);
		if(lnotfirst) {
			return this._doPath(la,lb);
		} else {
			var laccum = this._doPath([startfrom],la);
			var laccum1 = this._doPath(laccum,lb);
			return laccum1;
		}
	}
	,_doPath: function(a,b) {
		var retval = [];
		if(Util2.isArray(a)) {
			if(b != null && !(Util2.isString(b) && b.length == 0)) {
				var _g = 0;
				var _g1 = js_Boot.__cast(a , Array);
				while(_g < _g1.length) {
					var lsourceItem = _g1[_g];
					++_g;
					try {
						if(b == "**") {
							retval.push(lsourceItem);
							var lstack = [lsourceItem];
							while(lstack.length > 0) {
								var litem = lstack.pop();
								if(Util2.isObject(litem)) {
									var _g2 = 0;
									var _g3 = UtilReflect.fields(litem);
									while(_g2 < _g3.length) {
										var lattrib = _g3[_g2];
										++_g2;
										var lelem = Util3.get(litem,lattrib);
										retval.push(lelem);
										lstack.push(lelem);
									}
								} else if(Util2.isArray(litem)) {
									var _g21 = 0;
									var _g31 = js_Boot.__cast(litem , Array);
									while(_g21 < _g31.length) {
										var lelem1 = _g31[_g21];
										++_g21;
										retval.push(lelem1);
										lstack.push(lelem1);
									}
								}
							}
						} else if(b == "*") {
							if(Util2.isObject(lsourceItem)) {
								var _g22 = 0;
								var _g32 = UtilReflect.fields(lsourceItem);
								while(_g22 < _g32.length) {
									var lattrib1 = _g32[_g22];
									++_g22;
									var lelem2 = Util3.get(lsourceItem,lattrib1);
									retval.push(lelem2);
								}
							} else if(Util2.isArray(lsourceItem)) {
								var _g23 = 0;
								var _g33 = js_Boot.__cast(lsourceItem , Array);
								while(_g23 < _g33.length) {
									var lelem3 = _g33[_g23];
									++_g23;
									retval.push(lelem3);
								}
							}
						} else if(Util2.isObject(lsourceItem) && Util2.isString(b)) {
							if(UtilReflect.hasField(lsourceItem,b)) {
								retval.push(UtilReflect.field(lsourceItem,b));
							}
						} else if(Util2.isSequence(lsourceItem) && Util2.isNumber(b)) {
							var arr = Util.SequenceToArray(lsourceItem);
							if(b >= 0 && b < arr.length) {
								retval.push(arr[b]);
							}
						}
					} catch( ex ) {
						if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
						console.log(ex);
					}
				}
			} else {
				retval = a;
			}
		}
		return retval;
	}
	,builtins: function() {
		var _gthis = this;
		var functions = { "+" : function(parentscope,scope,l,src,tt,b,h) {
			var a = Util3.get(scope,"a",0);
			var bb = Util3.get(scope,"b",0);
			if(Util.gettype(a) == Util.gettype(bb)) {
				return a + bb;
			} else {
				return null;
			}
		}, "-" : function(parentscope1,scope1,l1,src1,tt1,b1,h1) {
			return Util3.get(scope1,"a",0) - Util3.get(scope1,"b",0);
		}, "x" : function(parentscope2,scope2,l2,src2,tt2,b2,h2) {
			return Util3.get(scope2,"a",1) * Util3.get(scope2,"b",1);
		}, "/" : function(parentscope3,scope3,l3,src3,tt3,b3,h3) {
			return Util3.get(scope3,"a",1) / Util3.get(scope3,"b",1);
		}, "=" : function(parentscope4,scope4,l4,src4,tt4,b4,h4) {
			var a1 = Util3.get(scope4,"a",null);
			var b5 = Util3.get(scope4,"b",null);
			if(Util.gettype(a1) == Util.gettype(b5)) {
				return a1 == b5;
			} else {
				return false;
			}
		}, "!=" : function(parentscope5,scope5,l5,src5,tt5,b6,h5) {
			var a2 = Util3.get(scope5,"a",null);
			var b7 = Util3.get(scope5,"b",null);
			return !(Util.gettype(a2) == Util.gettype(b7) && a2 == b7);
		}, ">=" : function(parentscope6,scope6,l6,src6,tt6,b8,h6) {
			return Util3.get(scope6,"a",null) >= Util3.get(scope6,"b",null);
		}, "<=" : function(parentscope7,scope7,l7,src7,tt7,b9,h7) {
			return Util3.get(scope7,"a",null) <= Util3.get(scope7,"b",null);
		}, ">" : function(parentscope8,scope8,l8,src8,tt8,b10,h8) {
			return Util3.get(scope8,"a",null) > Util3.get(scope8,"b",null);
		}, "<" : function(parentscope9,scope9,l9,src9,tt9,b11,h9) {
			return Util3.get(scope9,"a",null) < Util3.get(scope9,"b",null);
		}, "&&" : function(parentscope10,scope10,l10,src10,tt10,b12,h10) {
			if(UtilReflect.hasField(scope10,"a")) {
				if(UtilReflect.hasField(scope10,"b")) {
					if(Util3.isTruthy(Util3.get(scope10,"a",false))) {
						return Util3.isTruthy(Util3.get(scope10,"b",false));
					} else {
						return false;
					}
				} else {
					return Util3.isTruthy(Util3.get(scope10,"a",false));
				}
			} else {
				return Util3.isTruthy(Util3.get(scope10,"b",false));
			}
		}, "||" : function(parentscope11,scope11,l11,src11,tt11,b13,h11) {
			if(!Util3.isTruthy(Util3.get(scope11,"a",false))) {
				return Util3.isTruthy(Util3.get(scope11,"b",false));
			} else {
				return true;
			}
		}, "!" : function(parentscope12,scope12,l12,src12,tt12,b14,h12) {
			return !Util3.isTruthy(Util3.get(scope12,"b",false));
		}, "if" : function(parentscope13,scope13,l13,src13,tt13,b15,h13) {
			var retval = null;
			var condvalue = false;
			if(UtilReflect.hasField(scope13,"cond")) {
				var condvalue1 = Util3.get(scope13,"cond");
				condvalue = Util3.isTruthy(_gthis._evaluate(parentscope13,condvalue1,l13,src13,tt13,b15,h13));
			}
			if(condvalue) {
				if(UtilReflect.hasField(scope13,"true")) {
					var retval1 = Util3.get(scope13,"true");
					retval = _gthis._evaluate(parentscope13,retval1,l13,src13,tt13,b15,h13);
				}
			} else if(UtilReflect.hasField(scope13,"false")) {
				var retval2 = Util3.get(scope13,"false");
				retval = _gthis._evaluate(parentscope13,retval2,l13,src13,tt13,b15,h13);
			}
			return retval;
		}, "keys" : function(parentscope14,scope14,l14,src14,tt14,b16,h14) {
			var obj = Util3.get(scope14,"map");
			if(Util2.isObject(obj)) {
				var retval3 = UtilReflect.fields(obj);
				retval3.sort(function(a3,b17) {
					return Reflect.compare(a3,b17);
				});
				return retval3;
			} else {
				return null;
			}
		}, "values" : function(parentscope15,scope15,l15,src15,tt15,b18,h15) {
			var obj1 = Util3.get(scope15,"map");
			if(Util2.isObject(obj1)) {
				var keys = UtilReflect.fields(obj1);
				keys.sort(function(a4,b19) {
					return Reflect.compare(a4,b19);
				});
				var vals = keys.map(function(key) {
					return Util3.get(obj1,key);
				});
				return vals;
			} else {
				return null;
			}
		}, "len" : function(parentscope16,scope16,l16,src16,tt16,b20,h16) {
			var item = Util3.get(scope16,"list",Util3.get(scope16,"value"));
			if(Util2.isSequence(item)) {
				var arr = Util.SequenceToArray(item);
				return arr.length;
			} else {
				return 0;
			}
		}, "type" : function(parentscope17,scope17,l17,src17,tt17,b21,h17) {
			var item1 = Util3.get(scope17,"value");
			return Util.gettype(item1);
		}, "makemap" : function(parentscope18,scope18,l18,src18,tt18,b22,h18) {
			var retval4 = { };
			var arr1 = Util3.get(scope18,"value");
			if(Util2.isArray(arr1)) {
				var _g = 0;
				var _g1 = js_Boot.__cast(arr1 , Array);
				while(_g < _g1.length) {
					var entry = _g1[_g];
					++_g;
					if(Util2.isArray(entry) && entry.length >= 2 && Util2.isString(entry[0])) {
						UtilReflect.setField(retval4,entry[0],entry[1]);
					}
				}
			}
			return retval4;
		}, "reduce" : function(parentscope19,scope19,l19,src19,tt19,b23,h19) {
			var retval5 = { };
			var listobj = Util3.get(scope19,"list");
			var t = Util3.get(scope19,"t");
			var accum = Util3.get(scope19,"accum");
			if(Util2.isSequence(listobj)) {
				var list = Util.SequenceToArray(listobj);
				var s2 = { };
				if(Util2.isObject(parentscope19)) {
					s2 = Util.shallowCopy(parentscope19);
				}
				Util.addObject(s2,scope19);
				var _g11 = 0;
				var _g2 = list.length;
				while(_g11 < _g2) {
					var ix = _g11++;
					var item2 = list[ix];
					UtilReflect.setField(s2,"item",item2);
					UtilReflect.setField(s2,"accum",accum);
					UtilReflect.setField(s2,"ix",ix);
					accum = _gthis._evaluate(s2,t,l19,src19,tt19,b23,h19);
				}
			}
			return accum;
		}, "$" : function(parentscope20,scope20,l20,src20,tt20,b24,h20) {
			return _gthis._processPath(src20,parentscope20,scope20,l20,src20,tt20,b24,h20);
		}, "@" : function(parentscope21,scope21,l21,src21,tt21,b25,h21) {
			return _gthis._processPath(parentscope21,parentscope21,scope21,l21,src21,tt21,b25,h21);
		}, "*" : function(parentscope22,scope22,l22,src22,tt22,b26,h22) {
			return _gthis._processPath(l22,parentscope22,scope22,l22,src22,tt22,b26,h22);
		}, "~" : function(parentscope23,scope23,l23,src23,tt23,b27,h23) {
			return _gthis._processPath(tt23,parentscope23,scope23,l23,src23,tt23,b27,h23);
		}, "%" : function(parentscope24,scope24,l24,src24,tt24,b28,h24) {
			var la = Util3.get(scope24,"a");
			var lb = Util3.get(scope24,"b");
			var lnotfirst = Util3.get(scope24,"notfirst");
			if(lnotfirst) {
				return _gthis._doPath(la,lb);
			} else if(la == null) {
				return _gthis._doPath([lb],null);
			} else {
				return _gthis._doPath([la],lb);
			}
		}, "head" : function(parentscope25,scope25,l25,src25,tt25,b29,h25) {
			var lb1 = Util3.get(scope25,"b");
			if(Util2.isSequence(lb1)) {
				var arr2 = Util.SequenceToArray(lb1);
				if(arr2.length > 0) {
					return arr2[0];
				} else {
					return null;
				}
			} else {
				return null;
			}
		}, "tail" : function(parentscope26,scope26,l26,src26,tt26,b30,h26) {
			var lb2 = Util3.get(scope26,"b");
			if(Util2.isSequence(lb2)) {
				var arr3 = Util.SequenceToArray(lb2);
				if(arr3.length > 0) {
					return arr3.slice(1);
				} else {
					return [];
				}
			} else {
				return null;
			}
		}, "split" : function(parentscope27,scope27,l27,src27,tt27,b31,h27) {
			var lvalue = Util3.get(scope27,"value");
			var lsep = Util3.get(scope27,"sep",",");
			var lmax = Util3.get(scope27,"max");
			var retval6 = null;
			if(!(!Util2.isString(lvalue))) {
				if(!(!(Util3.isTruthy(lsep) && Util2.isString(lsep)))) {
					if(!(!(Util2.isNumber(lmax) || lmax == null))) {
						var lstr = js_Boot.__cast(lvalue , String);
						retval6 = lvalue.split(lsep);
						if(lmax != null && lmax >= 0 && lmax < lstr.length) {
							var lresult1 = retval6.slice(0,lmax - 1);
							var lresult2 = retval6.slice(-1 * (retval6.length - lmax + 1));
							lresult1[lmax - 1] = lresult2.join(lsep);
							retval6 = lresult1;
						}
					}
				}
			}
			return retval6;
		}, "trim" : function(parentscope28,scope28,l28,src28,tt28,b32,h28) {
			var lvalue1 = Util3.get(scope28,"value");
			var retval7 = null;
			if(!(!Util2.isString(lvalue1))) {
				retval7 = StringTools.trim(lvalue1);
			}
			return retval7;
		}, "pos" : function(parentscope29,scope29,l29,src29,tt29,b33,h29) {
			var lvalue2 = Util3.get(scope29,"value");
			var lsub = Util3.get(scope29,"sub");
			var retval8 = null;
			if(!(!Util2.isString(lvalue2))) {
				if(!(!(Util3.isTruthy(lsub) && Util2.isString(lsub)))) {
					retval8 = (js_Boot.__cast(lvalue2 , String)).indexOf(lsub);
				}
			}
			return retval8;
		}, "string" : function(parentscope30,scope30,l30,src30,tt30,b34,h30) {
			var lvalue3 = Util3.get(scope30,"value");
			var retval9;
			if(Util2.isString(lvalue3)) {
				retval9 = lvalue3;
			} else if(Util2.isNumber(lvalue3)) {
				try {
					retval9 = Std.string(lvalue3);
				} catch( err ) {
					retval9 = "failed cast";
				}
			} else if(Util2.isBool(lvalue3)) {
				if(Util3.isTruthy(lvalue3)) {
					retval9 = "true";
				} else {
					retval9 = "false";
				}
			} else if(lvalue3 == null) {
				retval9 = "null";
			} else if(Util2.isArray(lvalue3)) {
				retval9 = "list";
			} else if(Util2.isObject(lvalue3)) {
				retval9 = "map";
			} else {
				retval9 = "unknown";
			}
			return retval9;
		}, "number" : function(parentscope31,scope31,l31,src31,tt31,b35,h31) {
			var lvalue4 = Util3.get(scope31,"value");
			var retval10 = 0;
			if(Util2.isNumber(lvalue4)) {
				retval10 = lvalue4;
			} else if(Util2.isString(lvalue4)) {
				try {
					retval10 = parseFloat(lvalue4);
				} catch( err1 ) {
				}
			} else if(Util2.isBool(lvalue4)) {
				if(Util3.isTruthy(lvalue4)) {
					retval10 = 1;
				} else {
					retval10 = 0;
				}
			} else {
				retval10 = 0;
			}
			return retval10;
		}, "boolean" : function(parentscope32,scope32,l32,src32,tt32,b36,h32) {
			var lvalue5 = Util3.get(scope32,"value");
			var retval11;
			if(Util2.isBool(lvalue5)) {
				retval11 = lvalue5;
			} else {
				retval11 = Util3.isTruthy(lvalue5);
			}
			return retval11;
		}};
		var _g3 = 0;
		var _g12 = UtilReflect.fields(functions);
		while(_g3 < _g12.length) {
			var fieldname = _g12[_g3];
			++_g3;
			UtilReflect.setField(functions,"has" + Std.string(fieldname),function(parentscope33,scope33,l33,src33,tt33,b37,h33) {
				return true;
			});
		}
		return functions;
	}
	,logenter: function(msg,s,t,h) {
		if(h > 0) {
			console.log("(" + h + "): " + msg);
			console.log(" - s: " + JSON.stringify(s,null,"  "));
			console.log(" - t: " + JSON.stringify(t,null,"  "));
		}
	}
	,logexit: function(msg,r,h) {
		if(h > 0) {
			console.log("(" + h + "): " + msg);
			console.log(" - r: " + JSON.stringify(r,null,"  "));
		}
	}
	,evaluate: function(src,tt,l,h) {
		if(h == null) {
			h = 0;
		}
		var retval = this._evaluate(src,tt,l,src,tt,this.builtins(),h);
		return retval;
	}
	,dec: function(x) {
		return x - 1;
	}
	,_evaluate: function(s,t,l,src,tt,b,h) {
		var r = null;
		this.logenter("_evaluate",s,t,h);
		if(Util2.isObject(t)) {
			if(Util3.isEval(t)) {
				r = this._evaluateEval(true,s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isEval2(t)) {
				r = this._evaluateEval2(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isBuiltinEval(t)) {
				r = this._evaluateBuiltin(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isQuoteEval(t)) {
				r = this._quoteEvaluate(s,Util3.get(t,"'"),l,src,tt,b,this.dec(h));
			} else if(Util3.isColonEval(t)) {
				r = Util3.get(t,":");
			} else if(Util3.isDictTransform(t)) {
				r = this._evaluateDict(s,t,l,src,tt,b,this.dec(h),false);
			}
		} else if(Util2.isArray(t)) {
			if(Util.isArrayBuiltinEval(t,b)) {
				r = this._evaluateArrayBuiltin(s,t,l,src,tt,b,this.dec(h));
			} else if(Util3.isListTransform(t)) {
				var tlist = Util.SequenceToArray(t);
				if(tlist.length > 0 && tlist[0] == "&&") {
					r = Util.flatten(this._evaluateList(s,tlist.slice(1),l,src,tt,b,this.dec(h)));
				} else {
					r = this._evaluateList(s,t,l,src,tt,b,this.dec(h));
				}
			}
		} else if(Util.isStringBuiltinEval(t,b)) {
			r = this._evaluateStringBuiltin(s,t,l,src,tt,b,this.dec(h));
		} else {
			r = t;
		}
		this.logexit("_evaluate",r,h);
		return r;
	}
	,_quoteEvaluate: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluate",s,t,h);
		var r;
		if(Util3.isDoubleQuoteEval(t)) {
			r = this._evaluate(s,Util3.get(t,"''"),l,src,tt,b,this.dec(h));
		} else if(Util3.isDictTransform(t)) {
			r = this._quoteEvaluateDict(s,t,l,src,tt,b,this.dec(h));
		} else if(Util3.isListTransform(t)) {
			r = this._quoteEvaluateList(s,t,l,src,tt,b,this.dec(h));
		} else {
			r = t;
		}
		this.logexit("_quoteEvaluate",r,h);
		return r;
	}
	,_evaluateStringBuiltin: function(s,t,l,src,tt,b,h) {
		var strt = js_Boot.__cast(t , String);
		var larr = strt.split(".");
		var larr2 = [];
		var _g = 0;
		while(_g < larr.length) {
			var litem = larr[_g];
			++_g;
			try {
				var i = Std.parseInt(litem);
				if(i != null) {
					larr2.push(i);
				} else {
					larr2.push(litem);
				}
			} catch( err ) {
				larr2.push(litem);
			}
		}
		return this._evaluateArrayBuiltin(s,larr2,l,src,tt,b,h);
	}
	,_evaluateArrayBuiltin: function(s,t,l,src,tt,b,h) {
		var retval = null;
		var arrt = js_Boot.__cast(t , Array);
		var lop = null;
		if(arrt.length > 0) {
			lop = js_Boot.__cast(arrt[0] , String);
		}
		if(lop.length > 0) {
			var lopChar = lop.charAt(0);
			var uset = { "&" : Util.getArrayBuiltinName(lop), "args" : arrt.slice(1), "head" : lopChar == "^"};
			retval = this._evaluateBuiltin(s,uset,l,src,tt,b,this.dec(h));
		}
		return retval;
	}
	,_evaluateBuiltin: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateBuiltin",s,t,h);
		var retval = null;
		if(UtilReflect.hasField(t,"args")) {
			var args = Util3.get(t,"args");
			var builtinname = this._evaluate(s,Util3.get(t,"&"),l,src,tt,b,this.dec(h));
			if(args.length == 0) {
				var uset = { "&" : builtinname};
				retval = this._evaluateBuiltinSimple(false,s,uset,l,src,tt,b,this.dec(h));
			} else if(args.length == 1) {
				var uset1 = { "&" : builtinname, "b" : this._evaluate(s,args[0],l,src,tt,b,this.dec(h))};
				retval = this._evaluateBuiltinSimple(false,s,uset1,l,src,tt,b,this.dec(h));
			} else {
				var list = js_Boot.__cast(this._evaluateList(s,args.slice(1),l,src,tt,b,this.dec(h)) , Array);
				retval = this._evaluate(s,args[0],l,src,tt,b,this.dec(h));
				var notfirst = false;
				var _g = 0;
				while(_g < list.length) {
					var item = list[_g];
					++_g;
					var uset2 = { "&" : builtinname, "a" : retval, "b" : item, "notfirst" : notfirst};
					retval = this._evaluateBuiltinSimple(false,s,uset2,l,src,tt,b,this.dec(h));
					notfirst = true;
				}
			}
			if(Util2.isArray(retval) && Util3.isTruthy(Util3.get(t,"head"))) {
				var arrretval = js_Boot.__cast(retval , Array);
				if(arrretval.length > 0) {
					retval = arrretval[0];
				} else {
					retval = null;
				}
			}
		} else {
			retval = this._evaluateBuiltinSimple(true,s,t,l,src,tt,b,h);
		}
		this.logexit("_evaluateBuiltin",retval,h);
		return retval;
	}
	,_evaluateBuiltinSimple: function(needseval,s,t,l,src,tt,b,h) {
		var retval = null;
		var builtinname = Util3.get(t,"&");
		var builtinf = Util3.get(b,builtinname);
		var llibname;
		if(builtinf) {
			llibname = "_override_" + Std.string(Util3.get(t,"&"));
		} else {
			llibname = Util3.get(t,"&");
		}
		if(Util2.isObject(l) && UtilReflect.hasField(l,llibname)) {
			var t2 = Util.shallowCopy(t);
			UtilReflect.setField(t2,"!",["^*",Util3.get(t,"&")]);
			UtilReflect.deleteField(t2,"&");
			retval = this._evaluateEval(needseval,s,t2,l,src,tt,b,this.dec(h));
		} else if(builtinf != null) {
			var sX;
			if(needseval) {
				sX = this._evaluateDict(s,t,l,src,tt,b,this.dec(h),true);
			} else {
				sX = t;
			}
			var s2 = null;
			if(Util2.isObject(s)) {
				s2 = Util.shallowCopy(s);
				Util.addObject(s2,sX);
			} else {
				s2 = sX;
			}
			var l2 = l;
			if(UtilReflect.hasField(t,"*")) {
				l2 = this._evaluateDict(s,Util3.get(t,"*"),l,src,tt,b,this.dec(h),false);
			}
			retval = builtinf(s,s2,l2,src,tt,b,this.dec(h));
		}
		return retval;
	}
	,_evaluateEval: function(needseval,s,t,l,src,tt,b,h) {
		this.logenter("_evaluateEval",s,t,h);
		var retval;
		var teval;
		if(needseval) {
			teval = this._evaluateDict(s,t,l,src,tt,b,h,false);
		} else {
			teval = t;
		}
		var t2 = Util3.get(teval,"!");
		var s2 = { };
		if(Util2.isObject(s)) {
			s2 = Util.shallowCopy(s);
		}
		Util.addObject(s2,teval);
		var l2 = l;
		if(UtilReflect.hasField(t,"*")) {
			l2 = this._evaluate(s,Util3.get(t,"*"),l,src,tt,b,h);
		}
		var r = this._evaluate(s2,t2,l2,src,tt,b,h);
		this.logexit("_evaluateEval",r,h);
		return r;
	}
	,_evaluateEval2: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateEval2",s,t,h);
		var retval;
		var t2 = this._evaluate(s,Util3.get(t,"!!"),l,src,tt,b,h);
		var s2 = s;
		if(UtilReflect.hasField(t,"s")) {
			var ts = this._evaluate(s,Util3.get(t,"s"),l,src,tt,b,h);
			if(Util2.isObject(ts)) {
				s2 = { };
				if(Util2.isObject(s)) {
					s2 = Util.shallowCopy(s);
				}
				Util.addObject(s2,t2);
			} else {
				s2 = ts;
			}
		}
		var l2 = l;
		if(UtilReflect.hasField(t,"*")) {
			l2 = this._evaluate(s,Util3.get(t,"*"),l,src,tt,b,h);
		}
		var r = this._evaluate(s2,t2,l2,src,tt,b,h);
		this.logexit("_evaluateEval",r,h);
		return r;
	}
	,_evaluateDict: function(s,t,l,src,tt,b,h,skipAmp) {
		this.logenter("_evaluateDict",s,t,h);
		var retval = this._doevaluateDict(false,s,t,l,src,tt,b,this.dec(h),skipAmp);
		this.logexit("_evaluateDict",retval,h);
		return retval;
	}
	,_quoteEvaluateDict: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluateDict",s,t,h);
		var retval = this._doevaluateDict(true,s,t,l,src,tt,b,this.dec(h),false);
		this.logexit("_quoteEvaluateDict",retval,h);
		return retval;
	}
	,_doevaluateDict: function(usequoteform,s,t,l,src,tt,b,h,skipAmp) {
		var retval = { };
		var _g = 0;
		var _g1 = UtilReflect.fields(t);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(usequoteform) {
				UtilReflect.setField(retval,key,this._quoteEvaluate(s,Util3.get(t,key),l,src,tt,b,h));
			} else if(key != "&") {
				var lnewt = this._evaluate(s,Util3.get(t,key),l,src,tt,b,h);
				UtilReflect.setField(retval,key,lnewt);
			}
		}
		return retval;
	}
	,_evaluateList: function(s,t,l,src,tt,b,h) {
		this.logenter("_evaluateList",s,t,h);
		var retval = this._doevaluateList(false,s,t,l,src,tt,b,this.dec(h));
		this.logexit("_evaluateList",retval,h);
		return retval;
	}
	,_quoteEvaluateList: function(s,t,l,src,tt,b,h) {
		this.logenter("_quoteEvaluateList",s,t,h);
		var retval = this._doevaluateList(true,s,t,l,src,tt,b,this.dec(h));
		this.logexit("_quoteEvaluateList",retval,h);
		return retval;
	}
	,_doevaluateList: function(usequoteform,s,t,l,src,tt,b,h) {
		var tarr = Util.SequenceToArray(t);
		var retval = tarr.slice();
		var _g1 = 0;
		var _g = tarr.length;
		while(_g1 < _g) {
			var ix = _g1++;
			var elem = tarr[ix];
			if(usequoteform) {
				elem = this._quoteEvaluate(s,elem,l,src,tt,b,h);
			} else {
				elem = this._evaluate(s,elem,l,src,tt,b,h);
			}
			retval[ix] = elem;
		}
		return retval;
	}
	,compilelib: function(decls,dists) {
		var tmp = this.builtins();
		return this._compilelib(decls,dists,{ },tmp);
	}
	,_compilelib: function(decls,dists,l,b) {
		var resultlib = { };
		var resultliblib = { };
		if(Util2.isObject(l)) {
			resultlib = Util.shallowCopy(l);
		}
		var all_candidate_decls = { };
		var _g = 0;
		while(_g < decls.length) {
			var decl = decls[_g];
			++_g;
			var declname = Util3.get(decl,"name","");
			if(UtilReflect.hasField(decl,"requires") && Util2.isArray(Util3.get(decl,"requires"))) {
				var reqnames = js_Boot.__cast(Util3.get(decl,"requires") , Array);
				var _g1 = 0;
				while(_g1 < reqnames.length) {
					var reqname = reqnames[_g1];
					++_g1;
					if(!UtilReflect.hasField(l,reqname)) {
						if(Util3.isPrefix(reqname,declname)) {
							UtilReflect.setField(resultlib,reqname,Util3.get(decl,"transform-t"));
						} else {
							UtilReflect.setField(all_candidate_decls,reqname,[]);
						}
					}
				}
			}
		}
		var _g2 = 0;
		var _g11 = UtilReflect.fields(all_candidate_decls);
		while(_g2 < _g11.length) {
			var reqname1 = _g11[_g2];
			++_g2;
			var candidate_decls = Util3.get(all_candidate_decls,reqname1);
			var _g21 = 0;
			while(_g21 < dists.length) {
				var dist = dists[_g21];
				++_g21;
				var _g3 = 0;
				while(_g3 < dist.length) {
					var decl1 = dist[_g3];
					++_g3;
					var declname1 = Util3.get(decl1,"name","");
					if(Util3.isPrefix(reqname1,declname1)) {
						candidate_decls.push(decl1);
					}
				}
			}
		}
		var _g4 = 0;
		var _g12 = UtilReflect.fields(all_candidate_decls);
		while(_g4 < _g12.length) {
			var reqname2 = _g12[_g4];
			++_g4;
			var candidate_decls1 = Util3.get(all_candidate_decls,reqname2);
			if(Util3.isTruthy(candidate_decls1)) {
				var candidate_decls_arr = js_Boot.__cast(candidate_decls1 , Array);
				var _g22 = 0;
				while(_g22 < candidate_decls_arr.length) {
					var candidate_decl = candidate_decls_arr[_g22];
					++_g22;
					var clresult = this._compilelib([candidate_decl],dists,resultlib,b);
					var clresultlib = Util3.get(clresult,"lib");
					Util.addObject(resultlib,clresultlib);
					UtilReflect.setField(resultlib,reqname2,Util3.get(candidate_decl,"transform-t"));
					break;
				}
			}
		}
		return { "lib" : resultlib};
	}
	,__class__: Sutl
};
var Sutlcore = function() { };
Sutlcore.__name__ = true;
Sutlcore.get = function() {
	return JSON.parse(Sutlcore.getStr());
};
Sutlcore.getStr = function() {
	return "\n\t\t[\n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"map-t\": \"^@.t\", \n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": [\n\t\t          \"&&\", \n\t\t          \"^@.accum\", \n\t\t          [\n\t\t            {\n\t\t              \"!\": \"^@.map-t\"\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"map_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"reverse_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": [\n\t\t          \"&&\", \n\t\t          {\n\t\t            \"!\": \"^*.reverse_core_emlynoregan_com\", \n\t\t            \"list\": [\n\t\t              \"&tail\", \n\t\t              \"^@.list\"\n\t\t            ]\n\t\t          }, \n\t\t          [\n\t\t            \"&head\", \n\t\t            \"^@.list\"\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"false\": {\n\t\t        \"'\": []\n\t\t      }, \n\t\t      \"cond\": \"^@.list\", \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"reverse_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": [\n\t\t              \"&&\", \n\t\t              \"^@.accum\", \n\t\t              \"^@.item\"\n\t\t            ]\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": \"^@.accum\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": [\n\t\t              \"&!=\", \n\t\t              \"^@.item\", \n\t\t              null\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"removenulls_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"count_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": {\n\t\t          \"accum\": 0, \n\t\t          \"list\": \"^@.obj\", \n\t\t          \"t\": {\n\t\t            \"'\": {\n\t\t              \"a\": {\n\t\t                \"!\": \"^*.count_core_emlynoregan_com\", \n\t\t                \"obj\": \"^@.item\"\n\t\t              }, \n\t\t              \"b\": \"^@.accum\", \n\t\t              \"&\": \"+\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"reduce\"\n\t\t        }\n\t\t      }, \n\t\t      \"false\": 1, \n\t\t      \"cond\": {\n\t\t        \"'\": {\n\t\t          \"a\": \"list\", \n\t\t          \"b\": {\n\t\t            \"value\": \"^@.obj\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"=\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"count_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"b\": {\n\t\t        \"list\": \"^@.list\", \n\t\t        \"accum\": [\n\t\t          [], \n\t\t          \"^@.lists\"\n\t\t        ], \n\t\t        \"t\": {\n\t\t          \":\": [\n\t\t            [\n\t\t              \"&&\", \n\t\t              \"^@.accum.0\", \n\t\t              [\n\t\t                [\n\t\t                  \"&&\", \n\t\t                  {\n\t\t                    \"true\": {\n\t\t                      \"b\": \"^@.accum.1\", \n\t\t                      \"&\": \"head\"\n\t\t                    }, \n\t\t                    \"false\": [], \n\t\t                    \"cond\": {\n\t\t                      \":\": {\n\t\t                        \"list\": \"^@.accum.1\", \n\t\t                        \"&\": \"len\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }, \n\t\t                  [\n\t\t                    \"^@.item\"\n\t\t                  ]\n\t\t                ]\n\t\t              ]\n\t\t            ], \n\t\t            {\n\t\t              \"b\": \"^@.accum.1\", \n\t\t              \"&\": \"tail\"\n\t\t            }\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"&\": \"head\"\n\t\t    }, \n\t\t    \"name\": \"foldone_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"foldone_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"list\": \"^@.item\", \n\t\t          \"lists\": \"^@.accum\", \n\t\t          \"&\": \"foldone_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"zip_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": [\n\t\t          [\n\t\t            \"&&\", \n\t\t            {\n\t\t              \"map\": \"^@.map1\", \n\t\t              \"&\": \"keys\"\n\t\t            }, \n\t\t            {\n\t\t              \"map\": \"^@.map2\", \n\t\t              \"&\": \"keys\"\n\t\t            }\n\t\t          ], \n\t\t          [\n\t\t            \"&&\", \n\t\t            {\n\t\t              \"map\": \"^@.map1\", \n\t\t              \"&\": \"values\"\n\t\t            }, \n\t\t            {\n\t\t              \"map\": \"^@.map2\", \n\t\t              \"&\": \"values\"\n\t\t            }\n\t\t          ]\n\t\t        ], \n\t\t        \"&\": \"zip\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"addmaps_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^@\", \n\t\t      \"map\", \n\t\t      [\n\t\t        \"^@\", \n\t\t        \"key\"\n\t\t      ]\n\t\t    ], \n\t\t    \"name\": \"mapget_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": \"^@.list\", \n\t\t        \"t\": {\n\t\t          \"'\": [\n\t\t            \"^@.item\", \n\t\t            true\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"map_core\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"keys2map_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \":\": [\n\t\t          \"&&\", \n\t\t          \"^@.accum\", \n\t\t          {\n\t\t            \"true\": [\n\t\t              {\n\t\t                \":\": \"^@.item\"\n\t\t              }\n\t\t            ], \n\t\t            \"false\": [], \n\t\t            \"cond\": {\n\t\t              \":\": {\n\t\t                \"!\": \"^@.filter-t\"\n\t\t              }\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"filter_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": {\n\t\t              \"true\": true, \n\t\t              \"false\": {\n\t\t                \"'\": {\n\t\t                  \"!\": \"^*.hasitems_core_emlynoregan_com\", \n\t\t                  \"list\": {\n\t\t                    \"''\": {\n\t\t                      \"b\": \"^@.list\", \n\t\t                      \"&\": \"tail\"\n\t\t                    }\n\t\t                  }\n\t\t                }\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \"'\": {\n\t\t                  \"!\": \"^*.hasitems_core_emlynoregan_com\", \n\t\t                  \"list\": {\n\t\t                    \"''\": {\n\t\t                      \"b\": \"^@.list\", \n\t\t                      \"&\": \"head\"\n\t\t                    }\n\t\t                  }\n\t\t                }\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": false, \n\t\t          \"cond\": {\n\t\t            \"'\": {\n\t\t              \"a\": {\n\t\t                \"list\": \"^@.list\", \n\t\t                \"&\": \"len\"\n\t\t              }, \n\t\t              \"b\": 0, \n\t\t              \"&\": \">\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"false\": {\n\t\t        \"a\": \"^@.list\", \n\t\t        \"b\": null, \n\t\t        \"&\": \"!=\"\n\t\t      }, \n\t\t      \"cond\": {\n\t\t        \"'\": {\n\t\t          \"a\": \"list\", \n\t\t          \"b\": {\n\t\t            \"value\": \"^@.list\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"=\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"hasitems_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core\", \n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"filter-t\": {\n\t\t          \"'\": {\n\t\t            \"a\": \"^@.item\", \n\t\t            \"b\": \"^@.outeritem\", \n\t\t            \"&\": \"=\"\n\t\t          }\n\t\t        }, \n\t\t        \"list\": \"^@.list\", \n\t\t        \"outeritem\": \"^@.item\", \n\t\t        \"&\": \"filter_core\"\n\t\t      }, \n\t\t      \"&\": \"hasitems_core\"\n\t\t    }, \n\t\t    \"name\": \"isinlist_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isinlist_core\", \n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&!\", \n\t\t          {\n\t\t            \"item\": \"^@.item\", \n\t\t            \"list\": \"^@.arr2\", \n\t\t            \"&\": \"isinlist_core\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"list\": \"^@.arr1\", \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"subtractarrs_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"subtractarrs_core\", \n\t\t      \"map_core\", \n\t\t      \"mapget_core\", \n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"list\": [\n\t\t          {\n\t\t            \"arr2\": \"^@.keys\", \n\t\t            \"arr1\": {\n\t\t              \"map\": \"^@.map\", \n\t\t              \"&\": \"keys\"\n\t\t            }, \n\t\t            \"&\": \"subtractarrs_core\"\n\t\t          }, \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"arr2\": \"^@.keys\", \n\t\t              \"arr1\": {\n\t\t                \"map\": \"^@.map\", \n\t\t                \"&\": \"keys\"\n\t\t              }, \n\t\t              \"&\": \"subtractarrs_core\"\n\t\t            }, \n\t\t            \"t\": {\n\t\t              \":\": {\n\t\t                \"key\": \"^@.item\", \n\t\t                \"&\": \"mapget_core\"\n\t\t              }\n\t\t            }, \n\t\t            \"&\": \"map_core\"\n\t\t          }\n\t\t        ], \n\t\t        \"&\": \"zip\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"removekeys_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": \"^@.item\", \n\t\t      \"list\": \"^@.pipeline-t\", \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": \"^@.item\", \n\t\t          \"item\": \"^@.accum\", \n\t\t          \"accum\": null\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"pipeline_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"value\": [\n\t\t        [\n\t\t          \"^@.item\", \n\t\t          {\n\t\t            \"!\": [\n\t\t              \"&&\", \n\t\t              {\n\t\t                \":\": \"^%\"\n\t\t              }, \n\t\t              {\n\t\t                \"value\": [\n\t\t                  [\n\t\t                    \":\", \n\t\t                    \"^@.map\"\n\t\t                  ]\n\t\t                ], \n\t\t                \"&\": \"makemap\"\n\t\t              }, \n\t\t              \"^@.item\"\n\t\t            ]\n\t\t          }\n\t\t        ]\n\t\t      ], \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"splitmapone_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": [\n\t\t        {\n\t\t          \"&\": \"keys\"\n\t\t        }, \n\t\t        {\n\t\t          \"&\": \"values\"\n\t\t        }\n\t\t      ], \n\t\t      \"&\": \"zip\"\n\t\t    }, \n\t\t    \"name\": \"unmakemap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\", \n\t\t      \"splitmapone_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"keys\"\n\t\t      }, \n\t\t      \"t\": \"^*.splitmapone_core\", \n\t\t      \"&\": \"map_core\"\n\t\t    }, \n\t\t    \"name\": \"splitmap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"filter_core\", \n\t\t      \"splitmap_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&!=\", \n\t\t          [\n\t\t            \"&head\", \n\t\t            {\n\t\t              \"map\": \"^@.item\", \n\t\t              \"&\": \"values\"\n\t\t            }\n\t\t          ], \n\t\t          null\n\t\t        ]\n\t\t      }, \n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"splitmap_core\"\n\t\t      }, \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"removenovaluemaps_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"removenovaluemaps_core\", \n\t\t      \"addmaps_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"list\": {\n\t\t        \"map\": \"^@.map\", \n\t\t        \"&\": \"removenovaluemaps_core\"\n\t\t      }, \n\t\t      \"accum\": {}, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"map2\": \"^@.item\", \n\t\t          \"map1\": \"^@.accum\", \n\t\t          \"&\": \"addmaps_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"removenullattribs_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"zip\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"map\": {\n\t\t        \"value\": {\n\t\t          \"list\": [\n\t\t            \"^@.list\", \n\t\t            \"^@.list\"\n\t\t          ], \n\t\t          \"&\": \"zip\"\n\t\t        }, \n\t\t        \"&\": \"makemap\"\n\t\t      }, \n\t\t      \"&\": \"keys\"\n\t\t    }, \n\t\t    \"name\": \"removedupstrarr_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"filter_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"filter-t\": {\n\t\t        \":\": [\n\t\t          \"&=\", \n\t\t          [\n\t\t            \"&!\", \n\t\t            [\n\t\t              \"&!\", \n\t\t              \"^@.left\"\n\t\t            ]\n\t\t          ], \n\t\t          [\n\t\t            \"&<\", \n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^@\"\n\t\t                }, \n\t\t                [\n\t\t                  \"item\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }, \n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^@\"\n\t\t                }, \n\t\t                [\n\t\t                  \"head\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }, \n\t\t      \"head\": {\n\t\t        \"b\": \"^@.list\", \n\t\t        \"&\": \"head\"\n\t\t      }, \n\t\t      \"list\": {\n\t\t        \"b\": \"^@.list\", \n\t\t        \"&\": \"tail\"\n\t\t      }, \n\t\t      \"&\": \"filter_core\"\n\t\t    }, \n\t\t    \"name\": \"qsfilter_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"qsfilter_core\", \n\t\t      \"quicksort_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \":\": [\n\t\t          \"&&\", \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"left\": true, \n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"qsfilter_core\"\n\t\t            }, \n\t\t            \"&\": \"quicksort_core_emlynoregan_com\"\n\t\t          }, \n\t\t          [\n\t\t            {\n\t\t              \"b\": \"^@.list\", \n\t\t              \"&\": \"head\"\n\t\t            }\n\t\t          ], \n\t\t          {\n\t\t            \"list\": {\n\t\t              \"left\": false, \n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"qsfilter_core\"\n\t\t            }, \n\t\t            \"&\": \"quicksort_core_emlynoregan_com\"\n\t\t          }\n\t\t        ]\n\t\t      }, \n\t\t      \"false\": [], \n\t\t      \"cond\": {\n\t\t        \":\": \"^@.list\"\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"quicksort_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"value\": {\n\t\t        \"t\": {\n\t\t          \":\": [\n\t\t            {\n\t\t              \"!\": [\n\t\t                \"&&\", \n\t\t                {\n\t\t                  \":\": \"^%\"\n\t\t                }, \n\t\t                [\n\t\t                  \"^@.item\"\n\t\t                ], \n\t\t                \"^@.keypath\"\n\t\t              ]\n\t\t            }, \n\t\t            \"^@.item\"\n\t\t          ]\n\t\t        }, \n\t\t        \"&\": \"map_core\"\n\t\t      }, \n\t\t      \"&\": \"makemap\"\n\t\t    }, \n\t\t    \"name\": \"idlisttomap_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"!\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": {\n\t\t                \"accum\": {\n\t\t                  \"index\": 0, \n\t\t                  \"result\": \"\"\n\t\t                }, \n\t\t                \"list\": \"^@.list\", \n\t\t                \"t\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"index\": 1, \n\t\t                        \"result\": \"^@.item\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.result\", \n\t\t                              \"^@.lastseparator\", \n\t\t                              \"^@.item\"\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.result\", \n\t\t                              \"^@.separator\", \n\t\t                              \"^@.item\"\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": [\n\t\t                            \"&=\", \n\t\t                            \"^@.listlen\", \n\t\t                            [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ]\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": [\n\t\t                        \"&=\", \n\t\t                        \"^@.accum.index\", \n\t\t                        0\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"&\": \"reduce\"\n\t\t              }\n\t\t            }, \n\t\t            \"false\": null, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.list\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"lastseparator\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.lastseparator\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": {\n\t\t              \"true\": {\n\t\t                \"'\": \"^@.separator\"\n\t\t              }, \n\t\t              \"false\": \" and \", \n\t\t              \"cond\": {\n\t\t                \"'\": \"^@.separator\"\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": \"^@.lastseparator\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }, \n\t\t        \"listlen\": {\n\t\t          \"list\": \"^@.list\", \n\t\t          \"&\": \"len\"\n\t\t        }, \n\t\t        \"separator\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.separator\"\n\t\t          }, \n\t\t          \"false\": \", \", \n\t\t          \"cond\": {\n\t\t            \"'\": \"^@.separator\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"join_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": [\n\t\t              \"^%\", \n\t\t              {\n\t\t                \"accum\": {\n\t\t                  \"index\": 0, \n\t\t                  \"result\": []\n\t\t                }, \n\t\t                \"list\": \"^@.list\", \n\t\t                \"t\": {\n\t\t                  \":\": {\n\t\t                    \"true\": {\n\t\t                      \":\": {\n\t\t                        \"index\": [\n\t\t                          \"&+\", \n\t\t                          \"^@.accum.index\", \n\t\t                          1\n\t\t                        ], \n\t\t                        \"result\": [\n\t\t                          \"&&\", \n\t\t                          \"^@.accum.result\", \n\t\t                          \"^@.item\"\n\t\t                        ]\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \":\": {\n\t\t                        \"index\": [\n\t\t                          \"&+\", \n\t\t                          \"^@.accum.index\", \n\t\t                          1\n\t\t                        ], \n\t\t                        \"result\": \"^@.accum.result\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \":\": [\n\t\t                        \"&&&\", \n\t\t                        [\n\t\t                          \"&>=\", \n\t\t                          \"^@.accum.index\", \n\t\t                          \"^@.start\"\n\t\t                        ], \n\t\t                        [\n\t\t                          \"&<\", \n\t\t                          \"^@.accum.index\", \n\t\t                          \"^@.stop\"\n\t\t                        ]\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"&\": \"reduce\"\n\t\t              }, \n\t\t              \"result\"\n\t\t            ]\n\t\t          }, \n\t\t          \"start\": {\n\t\t            \"!\": \"^@.fixarg\", \n\t\t            \"defaultarg\": 0, \n\t\t            \"arg\": \"^@.start\"\n\t\t          }, \n\t\t          \"stop\": {\n\t\t            \"!\": \"^@.fixarg\", \n\t\t            \"defaultarg\": {\n\t\t              \"list\": \"^@.list\", \n\t\t              \"&\": \"len\"\n\t\t            }, \n\t\t            \"arg\": \"^@.stop\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"fixarg\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": [\n\t\t                  \"&+\", \n\t\t                  {\n\t\t                    \"list\": \"^@.list\", \n\t\t                    \"&\": \"len\"\n\t\t                  }, \n\t\t                  \"^@.arg\"\n\t\t                ]\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.arg\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&<\", \n\t\t                  \"^@.arg\", \n\t\t                  0\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": \"^@.defaultarg\", \n\t\t          \"cond\": {\n\t\t            \":\": \"^@.arg\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"slice_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": null, \n\t\t      \"list\": \"^@.list\", \n\t\t      \"t\": {\n\t\t        \"'\": {\n\t\t          \"true\": {\n\t\t            \"'\": \"^@.accum\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \"'\": \"^@.item\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \"'\": [\n\t\t              \"&!=\", \n\t\t              \"^@.accum\", \n\t\t              null\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"coalesce_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isinlist_core\"\n\t\t    ], \n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"accum\": {\n\t\t          \"found\": false, \n\t\t          \"result\": null\n\t\t        }, \n\t\t        \"list\": \"^@.cases\", \n\t\t        \"t\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": \"^@.accum\"\n\t\t            }, \n\t\t            \"false\": {\n\t\t              \"'\": {\n\t\t                \"true\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"found\": true, \n\t\t                            \"result\": \"^@.item.1\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": \"^@.accum\"\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": {\n\t\t                            \"!\": \"^*.isinlist_core\", \n\t\t                            \"item\": \"^@.value\", \n\t\t                            \"list\": \"^@.item.0\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": {\n\t\t                        \"true\": {\n\t\t                          \"'\": {\n\t\t                            \"found\": true, \n\t\t                            \"result\": \"^@.item.1\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"false\": {\n\t\t                          \"'\": \"^@.accum\"\n\t\t                        }, \n\t\t                        \"cond\": {\n\t\t                          \"'\": [\n\t\t                            \"&=\", \n\t\t                            \"^@.item.0\", \n\t\t                            \"^@.value\"\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"if\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": [\n\t\t                        \"&=\", \n\t\t                        {\n\t\t                          \"value\": \"^@.item.0\", \n\t\t                          \"&\": \"type\"\n\t\t                        }, \n\t\t                        \"list\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \"'\": {\n\t\t                    \"found\": true, \n\t\t                    \"result\": \"^@.item\"\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \"'\": [\n\t\t                    \"&&&\", \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"value\": \"^@.item\", \n\t\t                        \"&\": \"type\"\n\t\t                      }, \n\t\t                      \"list\"\n\t\t                    ], \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"list\": \"^@.item\", \n\t\t                        \"&\": \"len\"\n\t\t                      }, \n\t\t                      2\n\t\t                    ]\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            }, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.accum.found\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"switch_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"^%\", \n\t\t      {\n\t\t        \"accum\": {\n\t\t          \"found\": false, \n\t\t          \"result\": null\n\t\t        }, \n\t\t        \"list\": \"^@.cases\", \n\t\t        \"t\": {\n\t\t          \"'\": {\n\t\t            \"true\": {\n\t\t              \"'\": \"^@.accum\"\n\t\t            }, \n\t\t            \"false\": {\n\t\t              \"'\": {\n\t\t                \"true\": {\n\t\t                  \"'\": {\n\t\t                    \"true\": {\n\t\t                      \"'\": {\n\t\t                        \"found\": true, \n\t\t                        \"result\": {\n\t\t                          \"!\": \"^@.item.1\"\n\t\t                        }\n\t\t                      }\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \"'\": \"^@.accum\"\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \"'\": {\n\t\t                        \"!\": {\n\t\t                          \"!\": \"^@.item.0\"\n\t\t                        }\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \"'\": {\n\t\t                    \"found\": true, \n\t\t                    \"result\": {\n\t\t                      \"!\": \"^@.item\"\n\t\t                    }\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \"'\": [\n\t\t                    \"&&&\", \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"value\": \"^@.item\", \n\t\t                        \"&\": \"type\"\n\t\t                      }, \n\t\t                      \"list\"\n\t\t                    ], \n\t\t                    [\n\t\t                      \"&=\", \n\t\t                      {\n\t\t                        \"list\": \"^@.item\", \n\t\t                        \"&\": \"len\"\n\t\t                      }, \n\t\t                      2\n\t\t                    ]\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            }, \n\t\t            \"cond\": {\n\t\t              \"'\": \"^@.accum.found\"\n\t\t            }, \n\t\t            \"&\": \"if\"\n\t\t          }\n\t\t        }, \n\t\t        \"&\": \"reduce\"\n\t\t      }, \n\t\t      \"result\"\n\t\t    ], \n\t\t    \"name\": \"when_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"&=\", \n\t\t      {\n\t\t        \"value\": \"^@.item\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"map\"\n\t\t    ], \n\t\t    \"name\": \"isdict_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": [\n\t\t      \"&=\", \n\t\t      {\n\t\t        \"value\": \"^@.item\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"list\"\n\t\t    ], \n\t\t    \"name\": \"islist_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"isdict_core\", \n\t\t      \"islist_core\"\n\t\t    ], \n\t\t    \"transform-t\": [\n\t\t      \"&!\", \n\t\t      [\n\t\t        \"&||\", \n\t\t        {\n\t\t          \"&\": \"isdict_core\"\n\t\t        }, \n\t\t        {\n\t\t          \"&\": \"islist_core\"\n\t\t        }\n\t\t      ]\n\t\t    ], \n\t\t    \"name\": \"issimple_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"hasitems_core\", \n\t\t      \"isdict_core\", \n\t\t      \"islist_core\", \n\t\t      \"switch_core\", \n\t\t      \"map_core\", \n\t\t      \"isinlist_core\", \n\t\t      \"newdiff_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.value\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": {\n\t\t                  \"!\": \"^@.keepvalue\"\n\t\t                }\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"value\": {\n\t\t            \"cases\": [\n\t\t              [\n\t\t                \"map\", \n\t\t                {\n\t\t                  \"true\": {\n\t\t                    \":\": {\n\t\t                      \"value\": {\n\t\t                        \"list\": {\n\t\t                          \"map\": \"^@.new\", \n\t\t                          \"&\": \"keys\"\n\t\t                        }, \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"true\": {\n\t\t                              \":\": {\n\t\t                                \"true\": null, \n\t\t                                \"false\": {\n\t\t                                  \":\": {\n\t\t                                    \"!\": {\n\t\t                                      \":\": {\n\t\t                                        \"true\": {\n\t\t                                          \":\": [\n\t\t                                            \"^@.item\", \n\t\t                                            \"^@.value\"\n\t\t                                          ]\n\t\t                                        }, \n\t\t                                        \"cond\": {\n\t\t                                          \":\": {\n\t\t                                            \"!\": \"^@.keepvalue\"\n\t\t                                          }\n\t\t                                        }, \n\t\t                                        \"&\": \"if\"\n\t\t                                      }\n\t\t                                    }, \n\t\t                                    \"value\": {\n\t\t                                      \"new\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.new\", \n\t\t                                        \"^@.item\"\n\t\t                                      ], \n\t\t                                      \"old\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.old\", \n\t\t                                        \"^@.item\"\n\t\t                                      ], \n\t\t                                      \"&\": \"newdiff_core\"\n\t\t                                    }\n\t\t                                  }\n\t\t                                }, \n\t\t                                \"cond\": {\n\t\t                                  \":\": [\n\t\t                                    \"&=\", \n\t\t                                    [\n\t\t                                      \"^%\", \n\t\t                                      \"^@.new\", \n\t\t                                      \"^@.item\"\n\t\t                                    ], \n\t\t                                    [\n\t\t                                      \"^%\", \n\t\t                                      \"^@.old\", \n\t\t                                      \"^@.item\"\n\t\t                                    ]\n\t\t                                  ]\n\t\t                                }, \n\t\t                                \"&\": \"if\"\n\t\t                              }\n\t\t                            }, \n\t\t                            \"false\": {\n\t\t                              \":\": [\n\t\t                                \"^@.item\", \n\t\t                                [\n\t\t                                  \"^%\", \n\t\t                                  \"^@.new\", \n\t\t                                  \"^@.item\"\n\t\t                                ]\n\t\t                              ]\n\t\t                            }, \n\t\t                            \"cond\": {\n\t\t                              \":\": {\n\t\t                                \"list\": {\n\t\t                                  \"map\": \"^@.old\", \n\t\t                                  \"&\": \"keys\"\n\t\t                                }, \n\t\t                                \"&\": \"isinlist_core\"\n\t\t                              }\n\t\t                            }, \n\t\t                            \"&\": \"if\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"makemap\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"false\": {\n\t\t                    \":\": \"^@.new\"\n\t\t                  }, \n\t\t                  \"cond\": {\n\t\t                    \":\": {\n\t\t                      \"item\": \"^@.old\", \n\t\t                      \"&\": \"isdict_core\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"if\"\n\t\t                }\n\t\t              ], \n\t\t              [\n\t\t                \"list\", \n\t\t                {\n\t\t                  \"!\": {\n\t\t                    \":\": {\n\t\t                      \"true\": {\n\t\t                        \":\": \"^@.list\"\n\t\t                      }, \n\t\t                      \"false\": [], \n\t\t                      \"cond\": {\n\t\t                        \":\": {\n\t\t                          \"&\": \"hasitems_core\"\n\t\t                        }\n\t\t                      }, \n\t\t                      \"&\": \"if\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"list\": {\n\t\t                    \"true\": {\n\t\t                      \":\": [\n\t\t                        \"^%\", \n\t\t                        {\n\t\t                          \"accum\": {\n\t\t                            \"index\": 0, \n\t\t                            \"result\": []\n\t\t                          }, \n\t\t                          \"list\": \"^@.new\", \n\t\t                          \"t\": {\n\t\t                            \":\": {\n\t\t                              \"index\": [\n\t\t                                \"&+\", \n\t\t                                \"^@.accum.index\", \n\t\t                                1\n\t\t                              ], \n\t\t                              \"result\": [\n\t\t                                \"&&\", \n\t\t                                \"^@.accum.result\", \n\t\t                                [\n\t\t                                  {\n\t\t                                    \"!\": {\n\t\t                                      \":\": {\n\t\t                                        \"true\": {\n\t\t                                          \":\": \"^@.value\"\n\t\t                                        }, \n\t\t                                        \"cond\": {\n\t\t                                          \":\": {\n\t\t                                            \"!\": \"^@.keepvalue\"\n\t\t                                          }\n\t\t                                        }, \n\t\t                                        \"&\": \"if\"\n\t\t                                      }\n\t\t                                    }, \n\t\t                                    \"value\": {\n\t\t                                      \"new\": \"^@.item\", \n\t\t                                      \"old\": [\n\t\t                                        \"^%\", \n\t\t                                        \"^@.old\", \n\t\t                                        \"^@.accum.index\"\n\t\t                                      ], \n\t\t                                      \"&\": \"newdiff_core\"\n\t\t                                    }\n\t\t                                  }\n\t\t                                ]\n\t\t                              ]\n\t\t                            }\n\t\t                          }, \n\t\t                          \"&\": \"reduce\"\n\t\t                        }, \n\t\t                        \"result\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    \"false\": {\n\t\t                      \":\": \"^@.new\"\n\t\t                    }, \n\t\t                    \"cond\": {\n\t\t                      \":\": {\n\t\t                        \"item\": \"^@.old\", \n\t\t                        \"&\": \"islist_core\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"if\"\n\t\t                  }\n\t\t                }\n\t\t              ], \n\t\t              {\n\t\t                \"false\": {\n\t\t                  \":\": \"^@.new\"\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \":\": [\n\t\t                    \"&=\", \n\t\t                    \"^@.new\", \n\t\t                    \"^@.old\"\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            ], \n\t\t            \"value\": {\n\t\t              \"value\": \"^@.new\", \n\t\t              \"&\": \"type\"\n\t\t            }, \n\t\t            \"&\": \"switch_core\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"keepvalue\": {\n\t\t        \":\": [\n\t\t          \"&||\", \n\t\t          \"^@.value\", \n\t\t          [\n\t\t            \"&!\", \n\t\t            {\n\t\t              \"item\": {\n\t\t                \"&\": \"type\"\n\t\t              }, \n\t\t              \"list\": [\n\t\t                \"null\", \n\t\t                \"map\", \n\t\t                \"list\"\n\t\t              ], \n\t\t              \"&\": \"isinlist_core\"\n\t\t            }\n\t\t          ]\n\t\t        ]\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"newdiff_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": [], \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": \"^@.item\"\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \":\": \"^@.accum\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \":\": [\n\t\t              \"&>\", \n\t\t              {\n\t\t                \"list\": \"^@.item\", \n\t\t                \"&\": \"len\"\n\t\t              }, \n\t\t              {\n\t\t                \"list\": \"^@.accum\", \n\t\t                \"&\": \"len\"\n\t\t              }\n\t\t            ]\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"longest_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"applynewdiff_core\", \n\t\t      \"when_core\", \n\t\t      \"removedupstrarr_core\", \n\t\t      \"map_core\", \n\t\t      \"longest_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  null, \n\t\t                  \"^@.diff\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": \"^@.old\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&!=\", \n\t\t                  \"^@.oldtype\", \n\t\t                  \"^@.difftype\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": \"^@.diff\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  \"^@.difftype\", \n\t\t                  \"map\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": {\n\t\t                  \"!\": {\n\t\t                    \":\": {\n\t\t                      \"value\": {\n\t\t                        \"list\": \"^@.keys\", \n\t\t                        \"t\": {\n\t\t                          \":\": [\n\t\t                            \"^@.item\", \n\t\t                            {\n\t\t                              \"diff\": [\n\t\t                                \"^@\", \n\t\t                                \"diff\", \n\t\t                                \"^@.item\"\n\t\t                              ], \n\t\t                              \"old\": [\n\t\t                                \"^@\", \n\t\t                                \"old\", \n\t\t                                \"^@.item\"\n\t\t                              ], \n\t\t                              \"&\": \"applynewdiff_core\"\n\t\t                            }\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"makemap\"\n\t\t                    }\n\t\t                  }, \n\t\t                  \"keys\": {\n\t\t                    \"list\": [\n\t\t                      \"&&\", \n\t\t                      {\n\t\t                        \"map\": \"^@.old\", \n\t\t                        \"&\": \"keys\"\n\t\t                      }, \n\t\t                      {\n\t\t                        \"map\": \"^@.diff\", \n\t\t                        \"&\": \"keys\"\n\t\t                      }\n\t\t                    ], \n\t\t                    \"&\": \"removedupstrarr_core\"\n\t\t                  }\n\t\t                }\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              {\n\t\t                \":\": [\n\t\t                  \"&=\", \n\t\t                  \"^@.difftype\", \n\t\t                  \"list\"\n\t\t                ]\n\t\t              }, \n\t\t              {\n\t\t                \":\": {\n\t\t                  \"!\": {\n\t\t                    \":\": [\n\t\t                      \"^%\", \n\t\t                      {\n\t\t                        \"list\": \"^@.longestlist\", \n\t\t                        \"accum\": {\n\t\t                          \"index\": 0, \n\t\t                          \"result\": []\n\t\t                        }, \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"index\": [\n\t\t                              \"&+\", \n\t\t                              \"^@.accum.index\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"result\": [\n\t\t                              \"&&\", \n\t\t                              \"^@.accum.result\", \n\t\t                              {\n\t\t                                \"diff\": [\n\t\t                                  \"^@\", \n\t\t                                  \"diff\", \n\t\t                                  \"^@.accum.index\"\n\t\t                                ], \n\t\t                                \"old\": [\n\t\t                                  \"^@\", \n\t\t                                  \"old\", \n\t\t                                  \"^@.accum.index\"\n\t\t                                ], \n\t\t                                \"&\": \"applynewdiff_core\"\n\t\t                              }\n\t\t                            ]\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"reduce\"\n\t\t                      }, \n\t\t                      \"result\"\n\t\t                    ]\n\t\t                  }, \n\t\t                  \"longestlist\": {\n\t\t                    \"list\": [\n\t\t                      \"^@.old\", \n\t\t                      \"^@.diff\"\n\t\t                    ], \n\t\t                    \"&\": \"longest_core\"\n\t\t                  }\n\t\t                }\n\t\t              }\n\t\t            ], \n\t\t            {\n\t\t              \":\": \"^@.diff\"\n\t\t            }\n\t\t          ], \n\t\t          \"&\": \"when_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"oldtype\": {\n\t\t        \"value\": \"^@.old\", \n\t\t        \"&\": \"type\"\n\t\t      }, \n\t\t      \"difftype\": {\n\t\t        \"value\": \"^@.diff\", \n\t\t        \"&\": \"type\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"applynewdiff_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": null, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"true\": {\n\t\t            \":\": {\n\t\t              \"value\": [\n\t\t                [\n\t\t                  \"!!\", \n\t\t                  {\n\t\t                    \"value\": [\n\t\t                      [\n\t\t                        \":\", \n\t\t                        \"^@.item\"\n\t\t                      ]\n\t\t                    ], \n\t\t                    \"&\": \"makemap\"\n\t\t                  }\n\t\t                ], \n\t\t                [\n\t\t                  \"s\", \n\t\t                  \"^@.accum\"\n\t\t                ]\n\t\t              ], \n\t\t              \"&\": \"makemap\"\n\t\t            }\n\t\t          }, \n\t\t          \"false\": {\n\t\t            \":\": \"^@.item\"\n\t\t          }, \n\t\t          \"cond\": {\n\t\t            \":\": \"^@.accum\"\n\t\t          }, \n\t\t          \"&\": \"if\"\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"combine_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"combine_core\", \n\t\t      \"keys2map_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"requires\": {\n\t\t        \"map\": {\n\t\t          \"list\": {\n\t\t            \"!\": {\n\t\t              \"accum\": {\n\t\t                \":\": [\n\t\t                  \"&&\"\n\t\t                ]\n\t\t              }, \n\t\t              \"list\": \"&@.list.*.requires\", \n\t\t              \"t\": {\n\t\t                \":\": [\n\t\t                  \"&&\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.item\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"reduce\"\n\t\t            }\n\t\t          }, \n\t\t          \"&\": \"keys2map_core\"\n\t\t        }, \n\t\t        \"&\": \"keys\"\n\t\t      }, \n\t\t      \"transform-t\": {\n\t\t        \"list\": \"&@.list.*.transform-t\", \n\t\t        \"&\": \"combine_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"declcombine_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": 0, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.accum\"\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.item\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&>=\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.item\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"max_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"transform-t\": {\n\t\t      \"accum\": 0, \n\t\t      \"t\": {\n\t\t        \":\": {\n\t\t          \"!\": {\n\t\t            \":\": {\n\t\t              \"true\": {\n\t\t                \":\": \"^@.accum\"\n\t\t              }, \n\t\t              \"false\": {\n\t\t                \":\": \"^@.itemlen\"\n\t\t              }, \n\t\t              \"cond\": {\n\t\t                \":\": [\n\t\t                  \"&>=\", \n\t\t                  \"^@.accum\", \n\t\t                  \"^@.itemlen\"\n\t\t                ]\n\t\t              }, \n\t\t              \"&\": \"if\"\n\t\t            }\n\t\t          }, \n\t\t          \"itemlen\": {\n\t\t            \"list\": \"^@.item\", \n\t\t            \"&\": \"len\"\n\t\t          }\n\t\t        }\n\t\t      }, \n\t\t      \"&\": \"reduce\"\n\t\t    }, \n\t\t    \"name\": \"lenmax_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"coalesce_core\", \n\t\t      \"traverse_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"value\": {\n\t\t                  \"accum\": [], \n\t\t                  \"list\": {\n\t\t                    \"map\": \"^@.source\", \n\t\t                    \"&\": \"keys\"\n\t\t                  }, \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"!\": {\n\t\t                        \":\": [\n\t\t                          \"&&\", \n\t\t                          \"^@.accum\", \n\t\t                          [\n\t\t                            [\n\t\t                              \"^@.item\", \n\t\t                              {\n\t\t                                \"source\": \"^@.transformedvalue\", \n\t\t                                \"&\": \"traverse_core_emlynoregan_com\"\n\t\t                              }\n\t\t                            ]\n\t\t                          ]\n\t\t                        ]\n\t\t                      }, \n\t\t                      \"transformedvalue\": {\n\t\t                        \"!\": \"^@.traverse-t\", \n\t\t                        \"value\": [\n\t\t                          \"^@\", \n\t\t                          \"source\", \n\t\t                          \"^@.item\"\n\t\t                        ], \n\t\t                        \"key\": \"^@.item\"\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"&\": \"makemap\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              [\n\t\t                \"^%\", \n\t\t                {\n\t\t                  \"accum\": {\n\t\t                    \"index\": 0, \n\t\t                    \"result\": []\n\t\t                  }, \n\t\t                  \"list\": \"^@.source\", \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"index\": [\n\t\t                        \"&+\", \n\t\t                        \"^@.index\", \n\t\t                        1\n\t\t                      ], \n\t\t                      \"result\": {\n\t\t                        \"!\": {\n\t\t                          \":\": [\n\t\t                            \"&&\", \n\t\t                            \"^@.accum.result\", \n\t\t                            [\n\t\t                              {\n\t\t                                \"source\": \"^@.transformedvalue\", \n\t\t                                \"&\": \"traverse_core_emlynoregan_com\"\n\t\t                              }\n\t\t                            ]\n\t\t                          ]\n\t\t                        }, \n\t\t                        \"transformedvalue\": {\n\t\t                          \"!\": \"^@.traverse-t\", \n\t\t                          \"value\": \"^@.item\", \n\t\t                          \"key\": \"^@.index\"\n\t\t                        }\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"result\"\n\t\t              ]\n\t\t            ], \n\t\t            {\n\t\t              \"!\": \"^@.traverse-t\", \n\t\t              \"value\": \"^@.source\"\n\t\t            }\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.source\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"traverse-t\": {\n\t\t        \"list\": [\n\t\t          \"^@.traverse-t\", \n\t\t          \"^@.t\"\n\t\t        ], \n\t\t        \"&\": \"coalesce_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"traverse_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"coalesce_core\", \n\t\t      \"filttrav_core_emlynoregan_com\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"!\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"value\": {\n\t\t                  \"accum\": [], \n\t\t                  \"list\": {\n\t\t                    \"map\": \"^@.source\", \n\t\t                    \"&\": \"keys\"\n\t\t                  }, \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"!\": {\n\t\t                        \":\": {\n\t\t                          \"true\": {\n\t\t                            \":\": [\n\t\t                              \"&&\", \n\t\t                              \"^@.accum\", \n\t\t                              [\n\t\t                                [\n\t\t                                  \"^@.item\", \n\t\t                                  {\n\t\t                                    \"source\": [\n\t\t                                      \"^@\", \n\t\t                                      \"source\", \n\t\t                                      \"^@.item\"\n\t\t                                    ], \n\t\t                                    \"&\": \"filttrav_core_emlynoregan_com\"\n\t\t                                  }\n\t\t                                ]\n\t\t                              ]\n\t\t                            ]\n\t\t                          }, \n\t\t                          \"false\": {\n\t\t                            \":\": \"^@.accum\"\n\t\t                          }, \n\t\t                          \"cond\": {\n\t\t                            \":\": \"^@.keepvalue\"\n\t\t                          }, \n\t\t                          \"&\": \"if\"\n\t\t                        }\n\t\t                      }, \n\t\t                      \"keepvalue\": {\n\t\t                        \"!\": \"^@.filter-t\", \n\t\t                        \"value\": [\n\t\t                          \"^@\", \n\t\t                          \"source\", \n\t\t                          \"^@.item\"\n\t\t                        ], \n\t\t                        \"key\": \"^@.item\"\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"&\": \"makemap\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              [\n\t\t                \"^%\", \n\t\t                {\n\t\t                  \"accum\": {\n\t\t                    \"index\": 0, \n\t\t                    \"result\": []\n\t\t                  }, \n\t\t                  \"list\": \"^@.source\", \n\t\t                  \"t\": {\n\t\t                    \":\": {\n\t\t                      \"index\": [\n\t\t                        \"&+\", \n\t\t                        \"^@.index\", \n\t\t                        1\n\t\t                      ], \n\t\t                      \"result\": {\n\t\t                        \"!\": {\n\t\t                          \":\": {\n\t\t                            \"true\": {\n\t\t                              \":\": [\n\t\t                                \"&&\", \n\t\t                                \"^@.accum.result\", \n\t\t                                {\n\t\t                                  \"source\": \"^@.item\", \n\t\t                                  \"&\": \"filttrav_core_emlynoregan_com\"\n\t\t                                }\n\t\t                              ]\n\t\t                            }, \n\t\t                            \"false\": {\n\t\t                              \":\": \"^@.accum.result\"\n\t\t                            }, \n\t\t                            \"cond\": {\n\t\t                              \":\": \"^@.keepvalue\"\n\t\t                            }, \n\t\t                            \"&\": \"if\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"keepvalue\": {\n\t\t                          \"!\": \"^@.filter-t\", \n\t\t                          \"value\": \"^@.item\", \n\t\t                          \"key\": \"^@.index\"\n\t\t                        }\n\t\t                      }\n\t\t                    }\n\t\t                  }, \n\t\t                  \"&\": \"reduce\"\n\t\t                }, \n\t\t                \"result\"\n\t\t              ]\n\t\t            ], \n\t\t            \"^@.source\"\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.source\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"filter-t\": {\n\t\t        \"list\": [\n\t\t          \"^@.filter-t\", \n\t\t          \"^@.t\"\n\t\t        ], \n\t\t        \"&\": \"coalesce_core\"\n\t\t      }\n\t\t    }, \n\t\t    \"name\": \"filttrav_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }, \n\t\t  {\n\t\t    \"requires\": [\n\t\t      \"switch_core\", \n\t\t      \"removenullattribs_core\", \n\t\t      \"addmaps_core\", \n\t\t      \"meta_core\", \n\t\t      \"removekeys_core\", \n\t\t      \"unmakemap_core\"\n\t\t    ], \n\t\t    \"transform-t\": {\n\t\t      \"true\": {\n\t\t        \":\": {\n\t\t          \"cases\": [\n\t\t            [\n\t\t              \"map\", \n\t\t              {\n\t\t                \"map2\": {\n\t\t                  \"map\": {\n\t\t                    \"value\": [\n\t\t                      [\n\t\t                        \"!\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-!\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"!!\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-!!\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \":\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-:\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"'\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-'\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"&&\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-&&\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ], \n\t\t                      [\n\t\t                        \"&\", \n\t\t                        {\n\t\t                          \"t\": \"^@.t.-&\", \n\t\t                          \"&\": \"meta_core\"\n\t\t                        }\n\t\t                      ]\n\t\t                    ], \n\t\t                    \"&\": \"makemap\"\n\t\t                  }, \n\t\t                  \"&\": \"removenullattribs_core\"\n\t\t                }, \n\t\t                \"map1\": {\n\t\t                  \"keys\": [\n\t\t                    \"-!\", \n\t\t                    \"-!!\", \n\t\t                    \"-&\", \n\t\t                    \"-&&\", \n\t\t                    \"-:\", \n\t\t                    \"-'\"\n\t\t                  ], \n\t\t                  \"map\": {\n\t\t                    \"value\": {\n\t\t                      \"list\": {\n\t\t                        \"map\": \"^@.t\", \n\t\t                        \"&\": \"unmakemap_core\"\n\t\t                      }, \n\t\t                      \"t\": {\n\t\t                        \":\": [\n\t\t                          [\n\t\t                            \"^%\", \n\t\t                            \"^@.item\", \n\t\t                            0\n\t\t                          ], \n\t\t                          {\n\t\t                            \"t\": [\n\t\t                              \"^%\", \n\t\t                              \"^@.item\", \n\t\t                              1\n\t\t                            ], \n\t\t                            \"&\": \"meta_core\"\n\t\t                          }\n\t\t                        ]\n\t\t                      }, \n\t\t                      \"&\": \"map_core\"\n\t\t                    }, \n\t\t                    \"&\": \"makemap\"\n\t\t                  }, \n\t\t                  \"&\": \"removekeys_core\"\n\t\t                }, \n\t\t                \"&\": \"addmaps_core\"\n\t\t              }\n\t\t            ], \n\t\t            [\n\t\t              \"list\", \n\t\t              {\n\t\t                \"true\": {\n\t\t                  \":\": [\n\t\t                    \"&&\", \n\t\t                    {\n\t\t                      \":\": [\n\t\t                        \"&&\"\n\t\t                      ]\n\t\t                    }, \n\t\t                    {\n\t\t                      \"b\": {\n\t\t                        \"list\": \"^@.t\", \n\t\t                        \"t\": {\n\t\t                          \":\": {\n\t\t                            \"t\": \"^@.item\", \n\t\t                            \"&\": \"meta_core\"\n\t\t                          }\n\t\t                        }, \n\t\t                        \"&\": \"map_core\"\n\t\t                      }, \n\t\t                      \"&\": \"tail\"\n\t\t                    }\n\t\t                  ]\n\t\t                }, \n\t\t                \"false\": {\n\t\t                  \":\": {\n\t\t                    \"list\": \"^@.t\", \n\t\t                    \"t\": {\n\t\t                      \":\": {\n\t\t                        \"t\": \"^@.item\", \n\t\t                        \"&\": \"meta_core\"\n\t\t                      }\n\t\t                    }, \n\t\t                    \"&\": \"map_core\"\n\t\t                  }\n\t\t                }, \n\t\t                \"cond\": {\n\t\t                  \":\": [\n\t\t                    \"&=\", \n\t\t                    [\n\t\t                      \"^%\", \n\t\t                      \"^@.t\", \n\t\t                      0\n\t\t                    ], \n\t\t                    \"-&&\"\n\t\t                  ]\n\t\t                }, \n\t\t                \"&\": \"if\"\n\t\t              }\n\t\t            ], \n\t\t            \"^@.t\"\n\t\t          ], \n\t\t          \"value\": {\n\t\t            \"value\": \"^@.t\", \n\t\t            \"&\": \"type\"\n\t\t          }, \n\t\t          \"&\": \"switch_core\"\n\t\t        }\n\t\t      }, \n\t\t      \"cond\": {\n\t\t        \":\": [\n\t\t          \"&!=\", \n\t\t          \"^@.t\", \n\t\t          null\n\t\t        ]\n\t\t      }, \n\t\t      \"&\": \"if\"\n\t\t    }, \n\t\t    \"name\": \"meta_core_emlynoregan_com\", \n\t\t    \"language\": \"sUTL0\"\n\t\t  }\n\t\t]\n\t\t";
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = true;
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Util = function() { };
Util.__name__ = true;
Util.isStringBuiltinEval = function(obj,b) {
	var retval = Util2.isString(obj);
	if(retval) {
		var str = js_Boot.__cast(obj , String);
		var larr = str.split(".");
		retval = Util.isArrayBuiltinEval(larr,b);
	}
	return retval;
};
Util.isArrayBuiltinEval = function(obj,b) {
	var retval = Util2.isArray(obj);
	if(retval) {
		var arr = Util.SequenceToArray(obj);
		retval = arr.length > 0;
		if(retval) {
			var lopArr = arr.slice(0,1);
			var lop = null;
			if(lopArr.length > 0) {
				lop = lopArr[0];
			} else {
				lop = null;
			}
			retval = Util2.isString(lop);
			if(retval) {
				var lopStr = js_Boot.__cast(lop , String);
				var lopSignifier = lopStr.charAt(0);
				var lopSignifier1 = lopStr.charAt(0);
				var lopBuiltinName = Util.getArrayBuiltinName(lopStr);
				if(lopSignifier1 == "&" || lopSignifier1 == "^") {
					retval = UtilReflect.hasField(b,lopBuiltinName);
				} else {
					retval = false;
				}
			}
		}
	}
	return retval;
};
Util.getArrayBuiltinName = function(aOp) {
	if(aOp.length != null && aOp.length > 0) {
		return HxOverrides.substr(aOp,1,aOp.length - 1);
	} else {
		return null;
	}
};
Util.gettype = function(item) {
	if(Util2.isObject(item)) {
		return "map";
	} else if(Util2.isArray(item)) {
		return "list";
	} else if(Util2.isString(item)) {
		return "string";
	} else if(Util2.isNumber(item)) {
		return "number";
	} else if(Util2.isBool(item)) {
		return "boolean";
	} else if(item == null) {
		return "null";
	} else {
		return "unknown";
	}
};
Util.MakeExcept = function(aMessage,aPath) {
	var retval = aPath.join(".");
	if(retval != "") {
		retval = retval + ": " + aMessage;
	} else {
		retval = aMessage;
	}
	return retval;
};
Util.deepEqual = function(aObj1,aObj2,maxdepth) {
	if(maxdepth == null) {
		maxdepth = 100;
	}
	return Util.deepEqual2(aObj1,aObj2,[],maxdepth);
};
Util.deepEqual2 = function(aObj1,aObj2,path,maxdepth) {
	if(maxdepth == null) {
		maxdepth = 100;
	}
	var s = new Sutl();
	var retval = false;
	if(maxdepth > 0) {
		var obj1Type = Util.gettype(aObj1);
		var obj2Type = Util.gettype(aObj2);
		retval = obj1Type == obj2Type;
		if(!retval) {
			throw new js__$Boot_HaxeError(Util.MakeExcept("Different types: type(" + Std.string(aObj1) + ")=" + obj1Type + ", type(" + Std.string(aObj2) + ")=" + obj2Type,path));
		}
		if(retval) {
			if(obj1Type == "map") {
				var obj1Fields = UtilReflect.fields(aObj1);
				var obj2Fields = UtilReflect.fields(aObj2);
				retval = obj1Fields.length == obj2Fields.length;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Keys don't match: fields(" + Std.string(aObj1) + ")=" + Std.string(obj1Fields) + ", fields(" + Std.string(aObj2) + ")=" + Std.string(obj2Fields),path));
				}
				if(retval) {
					var _g = 0;
					while(_g < obj1Fields.length) {
						var obj1Field = obj1Fields[_g];
						++_g;
						path.push(obj1Field);
						if(UtilReflect.hasField(aObj2,obj1Field)) {
							retval = Util.deepEqual2(UtilReflect.field(aObj1,obj1Field),UtilReflect.field(aObj2,obj1Field),path,maxdepth - 1);
						} else {
							retval = false;
						}
						path.pop();
						if(!retval) {
							break;
						}
					}
				}
			} else if(obj1Type == "list") {
				retval = aObj1.length == aObj2.length;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Array lengths don't match: length(" + Std.string(aObj1) + ")=" + Std.string(aObj1.length) + ", length(" + Std.string(aObj2) + ")=" + Std.string(aObj2.length),path));
				}
				if(retval) {
					var len = js_Boot.__cast(aObj1.length , Int);
					var _g1 = 0;
					var _g2 = len;
					while(_g1 < _g2) {
						var ix = _g1++;
						path.push(ix);
						retval = Util.deepEqual2(aObj1[ix],aObj2[ix],path,maxdepth - 1);
						path.pop();
						if(!retval) {
							break;
						}
					}
				}
			} else {
				retval = aObj1 == aObj2;
				if(!retval) {
					throw new js__$Boot_HaxeError(Util.MakeExcept("Values don't match (" + Std.string(aObj1) + ", " + Std.string(aObj2) + ")",path));
				}
			}
		}
	}
	return retval;
};
Util.deepCopy = function(aObj) {
	var retval = null;
	var s = new Sutl();
	var objType = Util.gettype(aObj);
	if(objType == "map") {
		retval = { };
		var objFields = UtilReflect.fields(aObj);
		var _g = 0;
		while(_g < objFields.length) {
			var objField = objFields[_g];
			++_g;
			UtilReflect.setField(retval,objField,Util.deepCopy(UtilReflect.field(aObj,objField)));
		}
	} else if(objType == "list") {
		var retvalArr = [];
		var _g1 = 0;
		var _g11 = js_Boot.__cast(aObj , Array);
		while(_g1 < _g11.length) {
			var elem = _g11[_g1];
			++_g1;
			retvalArr.push(Util.deepCopy(elem));
		}
		retval = retvalArr;
	} else {
		retval = aObj;
	}
	return retval;
};
Util.addObject = function(aBase,aAdd) {
	if(Util2.isObject(aBase) && Util2.isObject(aAdd)) {
		var _g = 0;
		var _g1 = UtilReflect.fields(aAdd);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			UtilReflect.setField(aBase,key,UtilReflect.field(aAdd,key));
		}
	}
};
Util.StringToArray = function(aStrObj) {
	var retval = null;
	if(Util2.isString(aStrObj)) {
		retval = [];
		var liststr = js_Boot.__cast(aStrObj , String);
		var _g1 = 0;
		var _g = liststr.length;
		while(_g1 < _g) {
			var ix = _g1++;
			retval.push(liststr.charAt(ix));
		}
	}
	return retval;
};
Util.SequenceToArray = function(aObj) {
	var retval = null;
	if(Util2.isArray(aObj)) {
		retval = js_Boot.__cast(aObj , Array);
	} else if(Util2.isString(aObj)) {
		retval = Util.StringToArray(aObj);
	}
	return retval;
};
Util.flatten = function(lst) {
	var retval = [];
	var _g = 0;
	while(_g < lst.length) {
		var elem = lst[_g];
		++_g;
		if(Util2.isArray(elem)) {
			retval = retval.concat(elem);
		} else {
			retval.push(elem);
		}
	}
	return retval;
};
Util.loadcoredist = function() {
	return Sutlcore.get();
};
Util.shallowCopy = function(aObj) {
	var retval = null;
	var objType = Util.gettype(aObj);
	if(objType == "map") {
		retval = Reflect.copy(aObj);
	} else if(objType == "list") {
		retval = [];
		var _g = 0;
		var _g1 = js_Boot.__cast(aObj , Array);
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			retval.push(elem);
		}
	} else {
		retval = aObj;
	}
	return retval;
};
var Util2 = function() { };
Util2.__name__ = true;
Util2.isObject = function(obj) {
	var retval = Type["typeof"](obj) == ValueType.TObject;
	return retval;
};
Util2.isArray = function(obj) {
	var retval = (obj instanceof Array) && obj.__enum__ == null;
	return retval;
};
Util2.isString = function(obj) {
	var o = obj;
	var retval = (o == null ? null : js_Boot.getClass(o)) == String;
	return retval;
};
Util2.isSequence = function(obj) {
	if(!Util2.isArray(obj)) {
		return Util2.isString(obj);
	} else {
		return true;
	}
};
Util2.isInt = function(obj) {
	var ltype = Type["typeof"](obj);
	return ltype == ValueType.TInt;
};
Util2.isNumber = function(obj) {
	var ltype = Type["typeof"](obj);
	if(ltype != ValueType.TInt) {
		return ltype == ValueType.TFloat;
	} else {
		return true;
	}
};
Util2.isBool = function(obj) {
	var ltype = Type["typeof"](obj);
	return ltype == ValueType.TBool;
};
var Util3 = function() { };
Util3.__name__ = true;
Util3.isBuiltinEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"&");
	} else {
		return false;
	}
};
Util3.isEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"!");
	} else {
		return false;
	}
};
Util3.isEval2 = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"!!");
	} else {
		return false;
	}
};
Util3.isQuoteEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"'");
	} else {
		return false;
	}
};
Util3.isDoubleQuoteEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,"''");
	} else {
		return false;
	}
};
Util3.isColonEval = function(obj) {
	if(Util2.isObject(obj)) {
		return UtilReflect.hasField(obj,":");
	} else {
		return false;
	}
};
Util3.isDictTransform = function(obj) {
	return Util2.isObject(obj);
};
Util3.isListTransform = function(obj) {
	return Util2.isArray(obj);
};
Util3.isTruthy = function(aObj) {
	var retval = false;
	if(Util2.isArray(aObj)) {
		retval = aObj.length > 0;
	} else if(Util2.isString(aObj)) {
		retval = aObj != "";
	} else if(Util2.isNumber(aObj)) {
		retval = aObj != 0;
	} else if(Util2.isBool(aObj)) {
		retval = aObj;
	} else if(Util2.isObject(aObj)) {
		retval = UtilReflect.fields(aObj).length > 0;
	} else {
		retval = aObj != null;
	}
	return retval;
};
Util3.isPrefix = function(str1,str2) {
	return str2.indexOf(str1) == 0;
};
Util3.get = function(obj,key,def) {
	var retval = null;
	if(Util2.isObject(obj)) {
		retval = UtilReflect.field(obj,key);
	}
	if(retval == null) {
		retval = def;
	}
	return retval;
};
var UtilReflect = function() { };
UtilReflect.__name__ = true;
UtilReflect.fields = function(obj) {
	return Reflect.fields(obj);
};
UtilReflect.hasField = function(obj,fieldname) {
	return Object.prototype.hasOwnProperty.call(obj,fieldname);
};
UtilReflect.field = function(obj,fieldname) {
	return Reflect.field(obj,fieldname);
};
UtilReflect.setField = function(obj,fieldname,value) {
	obj[fieldname] = value;
	return;
};
UtilReflect.deleteField = function(obj,fieldname) {
	return Reflect.deleteField(obj,fieldname);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
